# EMQX Configuration for mTLS IoT Device Authentication
# Файл конфигурации для настройки EMQX с поддержкой mTLS аутентификации

# =============================================================================
# HTTP/TCP Configuration for non-SSL connections
# =============================================================================

## TCP listener for mqtt protocol on port 1883 (without SSL)
## Настроен для внутренних сервисов без аутентификации
listeners.tcp.default {
  bind = "0.0.0.0:1883"
  max_connections = 1024000
}

## WebSocket listener for HTTP dashboard and WebSocket MQTT
listeners.ws.default {
  bind = "0.0.0.0:8083"
  max_connections = 1024000
}

# =============================================================================
# Dashboard Configuration (HTTP без SSL)
# =============================================================================

dashboard {
  ## HTTP listener (без SSL)
  listeners.http {
    bind = "0.0.0.0:18083"
  }

  ## Dashboard default credentials
  default_username = "admin"
  default_password = "iot-hub-admin"
}

# =============================================================================
# SSL/TLS Configuration for mTLS
# =============================================================================

## SSL listener for mqtts protocol on port 8883
## Настроен для IoT устройств с mTLS аутентификацией
listeners.ssl.default {
  bind = "0.0.0.0:8883"
  ## Maximum number of concurrent connections
  max_connections = 1024000
  ## SSL options
  ssl_options {
    ## Path to the CA certificate file (generated by IoT Hub)
    cacertfile = "/opt/emqx/etc/certs/ca-cert.pem"
    ## Path to the server certificate file
    certfile = "/opt/emqx/etc/certs/server-cert.pem"
    ## Path to the server private key file
    keyfile = "/opt/emqx/etc/certs/server-key.pem"
    ## Require client certificate (mTLS)
    verify = verify_peer
    ## Fail if client doesn't provide certificate
    fail_if_no_peer_cert = true
    ## SSL versions
    versions = ["tlsv1.3", "tlsv1.2"]
    ## Cipher suites
    ciphers = [
    "ECDHE-ECDSA-AES256-GCM-SHA384",
    "ECDHE-RSA-AES256-GCM-SHA384",
    "ECDHE-ECDSA-AES256-SHA384",
    "ECDHE-RSA-AES256-SHA384",
    "ECDHE-ECDSA-AES128-GCM-SHA256",
    "ECDHE-RSA-AES128-GCM-SHA256"
    ]
    ## Certificate depth
    depth = 10
    ## Password for private key (if encrypted)
    # password = "your_password_here"
  }
}

# =============================================================================
# Authentication Configuration - двойная настройка
# =============================================================================

## Глобальная авторизация - разрешить всё по умолчанию
authorization {
  no_match = allow
  deny_action = ignore
  cache {
    enable = true
    max_size = 32
    ttl = 1m
  }
  sources = []
}

## HTTP-based authentication только для mTLS connections
## Применяется только к SSL соединениям через механизм проверки порта
authentication = [ {
  mechanism = password_based
  backend = built_in_database
  user_id_type = clientid
  enable = false
  }, {
    ,
    mechanism = password_based
    backend = http
    method = post
    url = "http://iot-backend:3000/api/devices/certificates/validate"
    body {
      clientid = "${clientid}"
      username = "${username}"
      password = "${password}"
      peerhost = "${peerhost}"
      peerport = "${peerport}"
      ## Certificate information from mTLS handshake
      cert_subject = "${cert_subject}"
      cert_common_name = "${cert_common_name}"
      cert_fingerprint = "${cert_fingerprint}"
    }
    headers {
      "Content-Type" = "application/json"
      "Accept" = "application/json"
    }
    request_timeout = "10s"
    pool_size = 32
    connect_timeout = "5s"
    enable_pipelining = 100
    enable = true
  }
  ]

  # =============================================================================
  # Logging Configuration
  # =============================================================================
  ## SSL/TLS specific logging
  log = {
    console_handler = {
      level = "info"
      enable = true
    }

    file_handlers = {
      default = {
        level = "info"
        file = "/opt/emqx/log/emqx.log"
      }
    }
  }

  # =============================================================================
  # Webhook Configuration for Certificate Events
  # =============================================================================

  # =============================================================================
  # Disabled Listeners
  # =============================================================================
  ## Disable WebSocket SSL listener to avoid certificate conflicts
  listeners.wss.default {
    enable = false
  }

  # =============================================================================
  # Performance Tuning
  # =============================================================================
  ## Node settings for better SSL performance
  node {
    ## Node name (required)
    name = "emqx@127.0.0.1"

    ## Node cookie for distributed erlang (required)
    cookie = "emqxsecretcookie"

    ## Data directory (required)
    data_dir = "/opt/emqx/data"

    ## Process limit
    process_limit = 2097152

    ## Max ports
    max_ports = 1048576

    ## Distributed buffer size
    dist_buffer_size = 8192

    ## Max ETS tables
    max_ets_tables = 262144
  }

  ## System tuning
  system {
    ## Scheduler settings
    schedulers {
      utilization_limit = 80
      compaction_of_load = true
    }

    ## Memory settings
    memory {
      ## System memory watermark
      watermark = 85

      ## Process memory limit
      process_limit = "2GB"
    }
  }
