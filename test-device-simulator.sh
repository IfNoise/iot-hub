#!/bin/bash

# test-device-simulator.sh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ MQTT RPC API

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IoT Device Simulator –∏ MQTT RPC API"
echo "=================================================="

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USER_ID="test-user"
DEVICE_ID="test-device"
API_URL="http://localhost:3000/api"
MQTT_HOST="localhost"
MQTT_PORT="1883"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
wait_seconds() {
    echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ $1 —Å–µ–∫—É–Ω–¥...${NC}"
    sleep $1
}

print_header "–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ MQTT –±—Ä–æ–∫–µ—Ä–∞"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ MQTT –±—Ä–æ–∫–µ—Ä
if command -v mosquitto_pub &> /dev/null; then
    echo "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É..."
    mosquitto_pub -h $MQTT_HOST -p $MQTT_PORT -t "test/topic" -m "test" -q 1 2>/dev/null
    check_status "MQTT –±—Ä–æ–∫–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo -e "${YELLOW}‚ö†Ô∏è  mosquitto_pub –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mosquitto-clients...${NC}"
    
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y mosquitto-clients
    elif command -v brew &> /dev/null; then
        brew install mosquitto
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å mosquitto-clients${NC}"
        echo "   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MQTT –±—Ä–æ–∫–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é"
    fi
fi

print_header "–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞..."
curl -s -f -X POST $API_URL/mqtt/status > /dev/null
check_status "API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω" || {
    echo -e "${RED}‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000${NC}"
    exit 1
}

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å MQTT –≤ API
echo "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ MQTT –∏–∑ API..."
MQTT_STATUS=$(curl -s -X POST $API_URL/mqtt/status)
echo "   –û—Ç–≤–µ—Ç: $MQTT_STATUS"

print_header "–®–∞–≥ 3: –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ñ–æ–Ω–µ..."
echo "   User ID: $USER_ID"
echo "   Device ID: $DEVICE_ID"
echo "   MQTT: $MQTT_HOST:$MQTT_PORT"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
node device-simulator.js \
    --user-id $USER_ID \
    --device-id $DEVICE_ID \
    --mqtt-host $MQTT_HOST \
    --mqtt-port $MQTT_PORT > simulator.log 2>&1 &

SIMULATOR_PID=$!
echo "   PID —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: $SIMULATOR_PID"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup() {
    echo -e "\n${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞...${NC}"
    kill $SIMULATOR_PID 2>/dev/null
    wait $SIMULATOR_PID 2>/dev/null
    echo -e "${GREEN}‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
}
trap cleanup EXIT

wait_seconds 3

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
if ps -p $SIMULATOR_PID > /dev/null; then
    check_status "–°–∏–º—É–ª—è—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞${NC}"
    echo "–õ–æ–≥ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞:"
    cat simulator.log
    exit 1
fi

print_header "–®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPC –∫–æ–º–∞–Ω–¥"

# –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
echo "üì± –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
RESPONSE=$(curl -s -X POST $API_URL/mqtt/device/command \
    -H "Content-Type: application/json" \
    -d "{
        \"userId\": \"$USER_ID\",
        \"deviceId\": \"$DEVICE_ID\",
        \"method\": \"getDeviceState\",
        \"timeout\": 5000
    }")

echo "   –û—Ç–≤–µ—Ç: $RESPONSE"
if echo "$RESPONSE" | grep -q '"result"'; then
    check_status "getDeviceState - —É—Å–ø–µ—à–Ω–æ"
else
    check_status "getDeviceState - –æ—à–∏–±–∫–∞"
fi

wait_seconds 1

# –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
echo "üå°Ô∏è  –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤"
RESPONSE=$(curl -s -X POST $API_URL/mqtt/device/command \
    -H "Content-Type: application/json" \
    -d "{
        \"userId\": \"$USER_ID\",
        \"deviceId\": \"$DEVICE_ID\",
        \"method\": \"getSensors\",
        \"timeout\": 5000
    }")

echo "   –û—Ç–≤–µ—Ç: $RESPONSE"
if echo "$RESPONSE" | grep -q '"temperature"'; then
    check_status "getSensors - —É—Å–ø–µ—à–Ω–æ"
else
    check_status "getSensors - –æ—à–∏–±–∫–∞"
fi

wait_seconds 1

# –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
echo "‚è∞ –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞"
RESPONSE=$(curl -s -X POST $API_URL/mqtt/device/command \
    -H "Content-Type: application/json" \
    -d "{
        \"userId\": \"$USER_ID\",
        \"deviceId\": \"$DEVICE_ID\",
        \"method\": \"updateDiscreteTimer\",
        \"params\": {
            \"id\": 1,
            \"enabled\": true,
            \"schedule\": \"0 8 * * *\",
            \"duration\": 300,
            \"channel\": 1
        },
        \"timeout\": 5000
    }")

echo "   –û—Ç–≤–µ—Ç: $RESPONSE"
if echo "$RESPONSE" | grep -q '"enabled":true'; then
    check_status "updateDiscreteTimer - —É—Å–ø–µ—à–Ω–æ"
else
    check_status "updateDiscreteTimer - –æ—à–∏–±–∫–∞"
fi

wait_seconds 1

# –¢–µ—Å—Ç 4: –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
echo "üîÑ –¢–µ—Å—Ç 4: –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (reboot)"
RESPONSE=$(curl -s -X POST $API_URL/mqtt/device/command/no-response \
    -H "Content-Type: application/json" \
    -d "{
        \"userId\": \"$USER_ID\",
        \"deviceId\": \"$DEVICE_ID\",
        \"method\": \"reboot\"
    }")

echo "   –û—Ç–≤–µ—Ç: $RESPONSE"
if echo "$RESPONSE" | grep -q '"success":true'; then
    check_status "reboot (no-response) - —É—Å–ø–µ—à–Ω–æ"
else
    check_status "reboot (no-response) - –æ—à–∏–±–∫–∞"
fi

wait_seconds 1

# –¢–µ—Å—Ç 5: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
echo "‚ùì –¢–µ—Å—Ç 5: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
RESPONSE=$(curl -s -X POST $API_URL/mqtt/device/command \
    -H "Content-Type: application/json" \
    -d "{
        \"userId\": \"$USER_ID\",
        \"deviceId\": \"$DEVICE_ID\",
        \"method\": \"unknownMethod\",
        \"timeout\": 5000
    }")

echo "   –û—Ç–≤–µ—Ç: $RESPONSE"
if echo "$RESPONSE" | grep -q '"error"'; then
    check_status "unknownMethod (–æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è) - —É—Å–ø–µ—à–Ω–æ"
else
    check_status "unknownMethod - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
fi

print_header "–®–∞–≥ 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"

echo "üìä –õ–æ–≥–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ–∫—É–Ω–¥—ã:"
tail -10 simulator.log

echo -e "\n${GREEN}üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
echo -e "${BLUE}üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
echo "   - –°–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"
echo "   - –õ–æ–≥–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: ./simulator.log"
echo "   - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:3000/api"
echo "   - –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
echo -e "\n${YELLOW}üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
while true; do
    echo -e "\n$(date): –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞..."
    curl -s -X POST $API_URL/mqtt/device/command \
        -H "Content-Type: application/json" \
        -d "{
            \"userId\": \"$USER_ID\",
            \"deviceId\": \"$DEVICE_ID\",
            \"method\": \"getSensors\",
            \"timeout\": 3000
        }" | jq '.result // empty' 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
    
    sleep 10
done
