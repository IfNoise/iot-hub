#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Kafka —Ç–æ–ø–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
 */

import { Kafka } from 'kafkajs';
import { KafkaTopics } from '@iot-hub/contracts-kafka';

const KAFKA_BROKER = process.env.KAFKA_BROKER || 'localhost:9092';

const kafka = new Kafka({
  clientId: 'topic-creator',
  brokers: [KAFKA_BROKER],
});

const admin = kafka.admin();

async function createTopics() {
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka...');
    await admin.connect();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const topicsToCreate = Object.values(KafkaTopics).map((topic) => ({
      topic,
      numPartitions: 3, // 3 –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
      replicationFactor: 1, // 1 –¥–ª—è development, –≤ production –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3
      configEntries: [
        {
          name: 'cleanup.policy',
          value: 'delete',
        },
        {
          name: 'retention.ms',
          value: '604800000', // 7 –¥–Ω–µ–π
        },
        {
          name: 'max.message.bytes',
          value: '1048576', // 1MB
        },
      ],
    }));

    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ ${topicsToCreate.length} —Ç–æ–ø–∏–∫–æ–≤...`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–æ–ø–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const existingTopics = await admin.listTopics();
    const topicsToCreateFiltered = topicsToCreate.filter(
      (t) => !existingTopics.includes(t.topic)
    );

    if (topicsToCreateFiltered.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ç–æ–ø–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–ø–∏–∫–∏
    const created = await admin.createTopics({
      topics: topicsToCreateFiltered,
    });

    if (created) {
      console.log('‚úÖ –¢–æ–ø–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã:');
      topicsToCreateFiltered.forEach((topic) => {
        console.log(`   - ${topic.topic}`);
      });
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ø–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏');
    }

    console.log('\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏:');
    const allTopics = await admin.listTopics();
    allTopics.sort().forEach((topic) => {
      console.log(`   - ${topic}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–æ–≤:', error);
    process.exit(1);
  } finally {
    await admin.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Kafka');
  }
}

// –ó–∞–ø—É—Å–∫
createTopics()
  .then(() => {
    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
