#!/usr/bin/env node

/**
 * –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MQTT RPC API
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node test-mqtt-rpc.js
 *
 * –ò–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 * node test-mqtt-rpc.js --host localhost --port 3000 --user user123 --device device456
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultConfig = {
  host: 'localhost',
  port: 3000,
  userId: 'test-user',
  deviceId: 'test-device',
  timeout: 5000,
};

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  const config = { ...defaultConfig };

  for (let i = 0; i < args.length; i += 2) {
    const key = args[i]?.replace('--', '');
    const value = args[i + 1];

    if (key && value) {
      config[key] = isNaN(value) ? value : Number(value);
    }
  }

  return config;
}

// HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è API
class MqttRpcClient {
  constructor(baseURL) {
    this.client = axios.create({
      baseURL,
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000,
    });
  }

  async sendCommand(userId, deviceId, method, params = {}, timeout = 5000) {
    try {
      const response = await this.client.post('/api/mqtt/device/command', {
        userId,
        deviceId,
        method,
        params,
        timeout,
      });
      return response.data;
    } catch (error) {
      if (error.response) {
        throw new Error(
          `HTTP ${error.response.status}: ${JSON.stringify(
            error.response.data
          )}`
        );
      }
      throw error;
    }
  }

  async sendCommandNoResponse(userId, deviceId, method, params = {}) {
    try {
      const response = await this.client.post(
        '/api/mqtt/device/command/no-response',
        {
          userId,
          deviceId,
          method,
          params,
        }
      );
      return response.data;
    } catch (error) {
      if (error.response) {
        throw new Error(
          `HTTP ${error.response.status}: ${JSON.stringify(
            error.response.data
          )}`
        );
      }
      throw error;
    }
  }

  async getStatus() {
    try {
      const response = await this.client.post('/api/mqtt/status');
      return response.data;
    } catch (error) {
      if (error.response) {
        throw new Error(
          `HTTP ${error.response.status}: ${JSON.stringify(
            error.response.data
          )}`
        );
      }
      throw error;
    }
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testMqttStatus(client) {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MQTT...');
  try {
    const status = await client.getStatus();
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å MQTT:', JSON.stringify(status, null, 2));
    return status.connected;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    return false;
  }
}

async function testGetDeviceState(client, userId, deviceId, timeout) {
  console.log('\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getDeviceState...');
  try {
    const result = await client.sendCommand(
      userId,
      deviceId,
      'getDeviceState',
      {},
      timeout
    );
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', JSON.stringify(result, null, 2));
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getDeviceState:', error.message);
    return false;
  }
}

async function testGetSensors(client, userId, deviceId, timeout) {
  console.log('\nüå°Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getSensors...');
  try {
    const result = await client.sendCommand(
      userId,
      deviceId,
      'getSensors',
      {},
      timeout
    );
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤:', JSON.stringify(result, null, 2));
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getSensors:', error.message);
    return false;
  }
}

async function testRebootNoResponse(client, userId, deviceId) {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reboot (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞)...');
  try {
    const result = await client.sendCommandNoResponse(
      userId,
      deviceId,
      'reboot',
      {}
    );
    console.log(
      '‚úÖ –ö–æ–º–∞–Ω–¥–∞ reboot –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:',
      JSON.stringify(result, null, 2)
    );
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ reboot:', error.message);
    return false;
  }
}

async function testUpdateDiscreteTimer(client, userId, deviceId, timeout) {
  console.log('\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ updateDiscreteTimer...');
  const params = {
    id: 1,
    enabled: true,
    schedule: '0 8 * * *', // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
    duration: 300, // 5 –º–∏–Ω—É—Ç
    channel: 1,
  };

  try {
    const result = await client.sendCommand(
      userId,
      deviceId,
      'updateDiscreteTimer',
      params,
      timeout
    );
    console.log(
      '‚úÖ –î–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω:',
      JSON.stringify(result, null, 2)
    );
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ updateDiscreteTimer:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const config = parseArgs();
  const baseURL = `http://${config.host}:${config.port}`;

  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MQTT RPC API');
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(config, null, 2));
  console.log('üåê API URL:', baseURL);

  const client = new MqttRpcClient(baseURL);

  let passedTests = 0;
  let totalTests = 0;

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MQTT
  totalTests++;
  if (await testMqttStatus(client)) {
    passedTests++;
  }

  // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  totalTests++;
  if (
    await testGetDeviceState(
      client,
      config.userId,
      config.deviceId,
      config.timeout
    )
  ) {
    passedTests++;
  }

  // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
  totalTests++;
  if (
    await testGetSensors(client, config.userId, config.deviceId, config.timeout)
  ) {
    passedTests++;
  }

  // –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞)
  totalTests++;
  if (await testRebootNoResponse(client, config.userId, config.deviceId)) {
    passedTests++;
  }

  // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  totalTests++;
  if (
    await testUpdateDiscreteTimer(
      client,
      config.userId,
      config.deviceId,
      config.timeout
    )
  ) {
    passedTests++;
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests}`);

  if (passedTests === totalTests) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

process.on('SIGINT', () => {
  console.log('\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
