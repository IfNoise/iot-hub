#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ mTLS
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã

set -e

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ mTLS –¥–ª—è IoT Hub"
echo "==========================================="

DEVICE_ID="test-device-mtls"
USER_ID="test-user-mtls"
BACKEND_URL="http://localhost:3000"
EMQX_HOST="localhost"
EMQX_SECURE_PORT="8883"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint
check_endpoint() {
  local url=$1
  local description=$2
  
  echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $description... "
  
  if curl -f -s "$url" > /dev/null 2>&1; then
    echo "‚úÖ OK"
    return 0
  else
    echo "‚ùå FAILED"
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
  local host=$1
  local port=$2
  local description=$3
  
  echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $description ($host:$port)... "
  
  if nc -z "$host" "$port" 2>/dev/null; then
    echo "‚úÖ OK"
    return 0
  else
    echo "‚ùå FAILED"
    return 1
  fi
}

echo
echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ backend —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "----------------------------"

if ! check_endpoint "$BACKEND_URL/api/health/ping" "Backend Health"; then
  echo "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run serve:backend"
  exit 1
fi

if ! check_endpoint "$BACKEND_URL/api/devices/certificates/ca" "CA Certificate endpoint"; then
  echo "‚ùå Endpoint CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  exit 1
fi

echo
echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ EMQX"
echo "----------------"

if ! check_port "$EMQX_HOST" "1883" "EMQX Standard MQTT"; then
  echo "‚ùå EMQX —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  exit 1
fi

if ! check_port "$EMQX_HOST" "$EMQX_SECURE_PORT" "EMQX mTLS"; then
  echo "‚ùå EMQX mTLS –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d emqx"
  exit 1
fi

if ! check_port "$EMQX_HOST" "18083" "EMQX Dashboard"; then
  echo "‚ùå EMQX Dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  exit 1
fi

echo
echo "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
echo "------------------------"

CERTS_DIR="./apps/backend/certs"

echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞... "
if [[ -f "$CERTS_DIR/ca-cert.pem" ]]; then
  if openssl x509 -in "$CERTS_DIR/ca-cert.pem" -noout -text > /dev/null 2>&1; then
    echo "‚úÖ OK"
  else
    echo "‚ùå INVALID"
    exit 1
  fi
else
  echo "‚ùå NOT FOUND"
  exit 1
fi

echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞... "
if [[ -f "$CERTS_DIR/server-cert.pem" ]]; then
  if openssl x509 -in "$CERTS_DIR/server-cert.pem" -noout -text > /dev/null 2>&1; then
    echo "‚úÖ OK"
  else
    echo "‚ùå INVALID"
    exit 1
  fi
else
  echo "‚ùå NOT FOUND"
  echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./generate-emqx-certs.sh localhost"
  exit 1
fi

echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞... "
if [[ -f "$CERTS_DIR/server-key.pem" ]]; then
  if openssl rsa -in "$CERTS_DIR/server-key.pem" -check -noout > /dev/null 2>&1; then
    echo "‚úÖ OK"
  else
    echo "‚ùå INVALID"
    exit 1
  fi
else
  echo "‚ùå NOT FOUND"
  exit 1
fi

echo
echo "4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSR –ø—Ä–æ—Ü–µ—Å—Å–∞"
echo "----------------------------"

echo "üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ CSR..."

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
TEST_DIR="/tmp/iot-hub-mtls-test"
mkdir -p "$TEST_DIR"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
openssl genrsa -out "$TEST_DIR/test-key.pem" 2048 2>/dev/null

# –°–æ–∑–¥–∞–µ–º CSR
cat > "$TEST_DIR/csr.conf" << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = RU
ST = Moscow
L = Moscow
O = IoT Hub Test
OU = Device
CN = $DEVICE_ID

[v3_req]
keyUsage = digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth
EOF

openssl req -new -key "$TEST_DIR/test-key.pem" \
  -out "$TEST_DIR/test.csr" \
  -config "$TEST_DIR/csr.conf" 2>/dev/null

echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π CSR —Å–æ–∑–¥–∞–Ω"

# –ß–∏—Ç–∞–µ–º CSR
CSR_PEM=$(cat "$TEST_DIR/test.csr")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSR –Ω–∞ backend
echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ CSR –Ω–∞ backend..."

CSR_RESPONSE=$(curl -s -X POST \
  "$BACKEND_URL/api/devices/certificates/$DEVICE_ID/sign-csr" \
  -H "Content-Type: application/json" \
  -d "{
    \"csrPem\": \"$CSR_PEM\",
    \"firmwareVersion\": \"1.0.0-test\",
    \"hardwareVersion\": \"v1.0-test\"
  }")

if echo "$CSR_RESPONSE" | jq -e '.clientCert' > /dev/null 2>&1; then
  echo "‚úÖ CSR —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω backend-–æ–º"
  
  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  CLIENT_CERT=$(echo "$CSR_RESPONSE" | jq -r '.clientCert')
  CA_CERT=$(echo "$CSR_RESPONSE" | jq -r '.caCert')
  
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  echo "$CLIENT_CERT" > "$TEST_DIR/client-cert.pem"
  echo "$CA_CERT" > "$TEST_DIR/ca-cert.pem"
  
  echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
else
  echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è CSR:"
  echo "$CSR_RESPONSE"
  exit 1
fi

echo
echo "5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ mTLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ EMQX"
echo "---------------------------------------"

echo "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ mTLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."

# –¢–µ—Å—Ç–∏—Ä—É–µ–º mTLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é mosquitto_pub (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
if command -v mosquitto_pub > /dev/null; then
  echo "üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å mosquitto_pub..."
  
  if timeout 10 mosquitto_pub \
    -h "$EMQX_HOST" \
    -p "$EMQX_SECURE_PORT" \
    --cafile "$TEST_DIR/ca-cert.pem" \
    --cert "$TEST_DIR/client-cert.pem" \
    --key "$TEST_DIR/test-key.pem" \
    -t "test/$DEVICE_ID/status" \
    -m "mTLS test successful" 2>/dev/null; then
    echo "‚úÖ mTLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ EMQX —É—Å–ø–µ—à–Ω–æ!"
  else
    echo "‚ùå –û—à–∏–±–∫–∞ mTLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ EMQX"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EMQX –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
  fi
else
  echo "‚ö†Ô∏è  mosquitto_pub –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ mosquitto-clients –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é openssl
echo "üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TLS handshake..."

if timeout 10 openssl s_client \
  -connect "$EMQX_HOST:$EMQX_SECURE_PORT" \
  -CAfile "$TEST_DIR/ca-cert.pem" \
  -cert "$TEST_DIR/client-cert.pem" \
  -key "$TEST_DIR/test-key.pem" \
  -quiet < /dev/null 2>/dev/null; then
  echo "‚úÖ TLS handshake —É—Å–ø–µ—à–µ–Ω!"
else
  echo "‚ùå –û—à–∏–±–∫–∞ TLS handshake"
  echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é EMQX mTLS"
fi

echo
echo "6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"
echo "-------------------------"

rm -rf "$TEST_DIR"
echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"

echo
echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "========================="
echo
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
echo "   ‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
echo "   ‚úÖ EMQX MQTT –±—Ä–æ–∫–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
echo "   ‚úÖ mTLS –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç"
echo "   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ"
echo "   ‚úÖ CSR –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "   ‚úÖ TLS handshake —É—Å–ø–µ—à–µ–Ω"
echo
echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å mTLS!"
echo
echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ device-simulator: ./start-device-simulator-mtls.sh"
echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMQX Dashboard: http://localhost:18083"
echo "   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ 'Clients'"
