#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ IoT Hub —Å mTLS
# –í–∫–ª—é—á–∞–µ—Ç backend, EMQX –∏ device-simulator

set -e

echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ IoT Hub —Å mTLS"
echo "================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port() {
  local host=$1
  local port=$2
  local service=$3
  local max_attempts=30
  local attempt=1

  echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ $service ($host:$port)..."
  
  while [[ $attempt -le $max_attempts ]]; do
    if nc -z "$host" "$port" 2>/dev/null; then
      echo "‚úÖ $service –¥–æ—Å—Ç—É–ø–µ–Ω"
      return 0
    fi
    
    echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - –æ–∂–∏–¥–∞–Ω–∏–µ $service..."
    sleep 2
    ((attempt++))
  done
  
  echo "‚ùå $service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
  return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoints
check_http() {
  local url=$1
  local service=$2
  local max_attempts=30
  local attempt=1

  echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoint $service ($url)..."
  
  while [[ $attempt -le $max_attempts ]]; do
    if curl -f -s "$url" > /dev/null 2>&1; then
      echo "‚úÖ $service HTTP endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
      return 0
    fi
    
    echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - –æ–∂–∏–¥–∞–Ω–∏–µ $service HTTP endpoint..."
    sleep 2
    ((attempt++))
  done
  
  echo "‚ùå $service HTTP endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
  return 1
}

echo
echo "üìã –≠—Ç–∞–ø—ã –∑–∞–ø—É—Å–∫–∞:"
echo "   1. –ó–∞–ø—É—Å–∫ backend (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)"
echo "   2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è EMQX"
echo "   3. –ó–∞–ø—É—Å–∫ EMQX —Å mTLS"
echo "   4. –ó–∞–ø—É—Å–∫ device-simulator —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"

echo
echo "1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ backend..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ backend
if curl -f -s "http://localhost:3000/api/health/ping" > /dev/null 2>&1; then
  echo "‚úÖ Backend —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
else
  echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º backend..."
  nx serve backend &
  BACKEND_PID=$!
  
  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
  if ! check_http "http://localhost:3000/api/health/ping" "Backend"; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
  fi
fi

echo
echo "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è EMQX..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
if [[ ! -f "./apps/backend/certs/ca-cert.pem" ]]; then
  echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ backend-–æ–º..."
  sleep 5
  
  if [[ ! -f "./apps/backend/certs/ca-cert.pem" ]]; then
    echo "‚ùå CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    exit 1
  fi
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
if [[ ! -f "./apps/backend/certs/server-cert.pem" ]]; then
  echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
  ./generate-emqx-certs.sh localhost
else
  echo "‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

echo
echo "3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ EMQX —Å mTLS..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º EMQX –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
docker-compose down emqx 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞–µ–º EMQX
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º EMQX..."
docker-compose up -d emqx

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ EMQX
if ! check_port "localhost" "8883" "EMQX mTLS"; then
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å EMQX"
  docker-compose logs emqx
  exit 1
fi

if ! check_port "localhost" "18083" "EMQX Dashboard"; then
  echo "‚ùå EMQX Dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  docker-compose logs emqx
  exit 1
fi

echo
echo "4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ device-simulator..."

# –î–∞–µ–º EMQX –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EMQX..."
sleep 10

# –ó–∞–ø—É—Å–∫–∞–µ–º device-simulator —Å mTLS
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º device-simulator —Å mTLS..."
echo "Device-simulator –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ EMQX"

echo
echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ IoT Hub —Å mTLS –∑–∞–ø—É—â–µ–Ω–∞!"
echo "=================================="
echo
echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   üåê EMQX Dashboard: http://localhost:18083"
echo "       –õ–æ–≥–∏–Ω: admin"
echo "       –ü–∞—Ä–æ–ª—å: iot-hub-admin"
echo
echo "   üì± Device Simulator API: http://localhost:3001/api/simulator"
echo "   üîô Backend API: http://localhost:3000/api"
echo
echo "üîê mTLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "   üì° MQTT Standard: mqtt://localhost:1883"
echo "   üîí MQTT mTLS: mqtts://localhost:8883"
echo "   üìÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: ./apps/backend/certs/"
echo
echo "üöÄ –ó–∞–ø—É—Å–∫ device-simulator —Å mTLS:"
echo "   ./start-device-simulator-mtls.sh"
echo
echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "   Backend: npm run serve:backend (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)"
echo "   EMQX: docker-compose logs -f emqx"
echo "   Device Simulator: ./start-device-simulator-mtls.sh"
echo
echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã:"
echo "   docker-compose down"
echo "   Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ backend"

echo
echo "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üéâ"
