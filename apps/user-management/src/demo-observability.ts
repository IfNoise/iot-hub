/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã observability –≤ user-management
 */

import { Logger } from '@nestjs/common';
import {
  ObservabilityConfigService,
  MetricsService,
  TelemetryService,
  LoggingService,
} from '@iot-hub/observability';

async function demonstrateObservability() {
  Logger.log('üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Observability –≤ user-management');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const configService = new ObservabilityConfigService();
    const config = configService.getConfig();

    Logger.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è observability –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
      serviceName: config.serviceName,
      version: config.serviceVersion,
      environment: config.environment,
      telemetryEnabled: config.telemetry.otelEnabled,
      loggingEnabled: config.logging.logLevel,
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const loggingService = new LoggingService(configService);
    const telemetryService = new TelemetryService(configService);
    const metricsService = new MetricsService(configService);

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    loggingService.info(
      'üöÄ User management service started with observability',
      {
        component: 'bootstrap',
        version: config.serviceVersion,
      }
    );

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–π—Å–∏–Ω–≥
    const span = telemetryService.startSpan('demo.operation', {
      'demo.type': 'observability_test',
      'service.name': config.serviceName,
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Ä–∞–±–æ—Ç—É
    await new Promise((resolve) => setTimeout(resolve, 100));

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metricsService.recordUserMetrics({
      serviceName: config.serviceName,
      serviceVersion: config.serviceVersion,
      environment: config.environment,
      operation: 'demo',
      success: true,
      durationMs: 100,
    });

    span.setStatus({ code: 1 }); // SUCCESS
    span.end();

    loggingService.info(
      '‚úÖ Observability demonstration completed successfully'
    );
    Logger.log('üéâ Observability —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } catch (error) {
    Logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ observability:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç
if (require.main === module) {
  demonstrateObservability()
    .then(() => {
      Logger.log('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      Logger.error('–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    });
}

export { demonstrateObservability };
