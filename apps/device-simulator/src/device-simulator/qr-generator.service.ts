import { Injectable, Logger } from '@nestjs/common';
import * as QRCode from 'qrcode';
import {
  DeviceQRDataSchema,
  MinimalDeviceQRSchema,
  TokenBasedDeviceQRSchema,
  HashBasedDeviceQRSchema,
} from '@iot-hub/devices';
import { z } from 'zod';

export type QRCodeType = 'minimal' | 'token' | 'hash';

export interface QRCodeGenerationOptions {
  type: QRCodeType;
  deviceId: string;
  fingerprint?: string;
  bindingToken?: string;
  keyHash?: string;
}

export interface QRCodeResult {
  data: z.infer<typeof DeviceQRDataSchema>;
  jsonString: string;
  estimatedSize: number;
  asciiQR: string;
  type: QRCodeType;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏ —Ç–∏–ø–∞ QR-–∫–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
@Injectable()
export class QRGeneratorService {
  private readonly logger = new Logger(QRGeneratorService.name);

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async generateDeviceQR(
    options: QRCodeGenerationOptions
  ): Promise<QRCodeResult> {
    this.logger.log(
      `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Ç–∏–ø–∞ "${options.type}" –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${options.deviceId}`
    );

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const qrData = this.createQRData(options);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    this.validateQRData(qrData, options.type);

    const jsonString = JSON.stringify(qrData);
    const estimatedSize = jsonString.length;

    this.logger.debug(`–†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞: ${estimatedSize} —Å–∏–º–≤–æ–ª–æ–≤`);
    this.logger.debug(`–î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞: ${jsonString}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASCII –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    const asciiQR = await this.generateASCIIQR(jsonString);

    return {
      data: qrData,
      jsonString,
      estimatedSize,
      asciiQR,
      type: options.type,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏
   */
  generateBindingToken(): string {
    const chars =
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let token = '';
    for (let i = 0; i < 32; i++) {
      token += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return token;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
   */
  generateKeyHash(): string {
    const hash = Math.random().toString(36).substring(2, 18);
    return `sha256-${hash}`;
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç QR-–∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  printQRToConsole(result: QRCodeResult): void {
    const border = '‚ïê'.repeat(60);

    console.log('\n' + border);
    console.log(`‚ïë  QR-–ö–û–î –£–°–¢–†–û–ô–°–¢–í–ê (${result.type.toUpperCase()})  `);
    console.log(border);
    console.log(`‚ïë  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${result.data.deviceId}`);
    console.log(`‚ïë  –†–∞–∑–º–µ—Ä: ${result.estimatedSize} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`‚ïë  –¢–∏–ø: ${this.getQRTypeDescription(result.type)}`);
    console.log(border);
    console.log('\nüì± –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥:');
    console.log(result.asciiQR);
    console.log('\nüìã JSON –¥–∞–Ω–Ω—ã–µ:');
    console.log(result.jsonString);
    console.log('\n' + border + '\n');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  private createQRData(
    options: QRCodeGenerationOptions
  ): z.infer<typeof DeviceQRDataSchema> {
    switch (options.type) {
      case 'minimal':
        if (!options.fingerprint) {
          throw new Error('Fingerprint –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞');
        }
        return {
          deviceId: options.deviceId,
          fingerprint: options.fingerprint,
          v: 1,
        };

      case 'token':
        if (!options.bindingToken) {
          throw new Error('–¢–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω-QR-–∫–æ–¥–∞');
        }
        return {
          deviceId: options.deviceId,
          bindingToken: options.bindingToken,
          v: 1,
        };

      case 'hash':
        if (!options.fingerprint || !options.keyHash) {
          throw new Error('Fingerprint –∏ keyHash –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ö–µ—à-QR-–∫–æ–¥–∞');
        }
        return {
          deviceId: options.deviceId,
          fingerprint: options.fingerprint,
          keyHash: options.keyHash,
          v: 1,
        };

      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø QR-–∫–æ–¥–∞: ${options.type}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
   */
  private validateQRData(data: unknown, type: QRCodeType): void {
    try {
      switch (type) {
        case 'minimal':
          MinimalDeviceQRSchema.parse(data);
          break;
        case 'token':
          TokenBasedDeviceQRSchema.parse(data);
          break;
        case 'hash':
          HashBasedDeviceQRSchema.parse(data);
          break;
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ —Ç–∏–ø–∞ ${type}:`, error);
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ASCII –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞
   */
  private async generateASCIIQR(data: string): Promise<string> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –≤ –≤–∏–¥–µ ASCII —Å–∏–º–≤–æ–ª–æ–≤
      return await QRCode.toString(data, {
        type: 'terminal',
        small: true,
        margin: 1,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ASCII QR-–∫–æ–¥–∞:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return `[QR-–ö–û–î: ${data}]`;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ QR-–∫–æ–¥–∞
   */
  private getQRTypeDescription(type: QRCodeType): string {
    switch (type) {
      case 'minimal':
        return '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (deviceId + fingerprint)';
      case 'token':
        return '–° —Ç–æ–∫–µ–Ω–æ–º (deviceId + bindingToken) - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π';
      case 'hash':
        return '–° —Ö–µ—à–µ–º (deviceId + fingerprint + keyHash)';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }
  }
}
