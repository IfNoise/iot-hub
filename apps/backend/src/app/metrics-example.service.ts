import { Injectable } from '@nestjs/common';
import { MetricsService } from './metrics';

/**
 * –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenTelemetry –º–µ—Ç—Ä–∏–∫
 * –≤ IoT Hub backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
@Injectable()
export class MetricsExampleService {
  
  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async simulateDeviceConnection(deviceId: string, deviceType: string = 'sensor'): Promise<void> {
    const startTime = Date.now();
    
    try {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      MetricsService.recordDeviceConnection(deviceId, deviceType);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      MetricsService.updateActiveDevices(1, deviceType);
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, Math.random() * 100));
      
      console.log(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} (${deviceType}) –ø–æ–¥–∫–ª—é—á–µ–Ω–æ`);
      
    } catch (error) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      MetricsService.recordError('connection_failed', 'device_connection', deviceId);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId}:`, error);
      throw error;
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async simulateMqttMessageProcessing(
    deviceId: string, 
    messageType: string = 'telemetry', 
    payload: any = {}
  ): Promise<void> {
    const startTime = Date.now();
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const processingTime = Math.random() * 200;
      await new Promise(resolve => setTimeout(resolve, processingTime));
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      MetricsService.recordMqttMessageProcessing(processingTime, messageType, true);
      
      console.log(`üì® MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${deviceId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (${processingTime.toFixed(2)}ms)`);
      
    } catch (error) {
      const endTime = Date.now();
      const failedProcessingTime = endTime - startTime;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      MetricsService.recordMqttMessageProcessing(failedProcessingTime, messageType, false);
      MetricsService.recordError('message_processing_failed', 'mqtt_processing', deviceId);
      
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${deviceId}:`, error);
      throw error;
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–ø–∏—Å—å—é –º–µ—Ç—Ä–∏–∫
   */
  async simulateApiRequest(method: string, endpoint: string): Promise<any> {
    const startTime = Date.now();
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞
      const responseTime = Math.random() * 500;
      await new Promise(resolve => setTimeout(resolve, responseTime));
      
      const statusCode = Math.random() > 0.1 ? 200 : 500; // 90% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ API
      MetricsService.recordApiResponse(responseTime, method, endpoint, statusCode);
      
      if (statusCode >= 400) {
        MetricsService.recordError('api_error', 'api_request');
        throw new Error(`API Error: ${statusCode}`);
      }
      
      console.log(`üåê API ${method} ${endpoint} - ${statusCode} (${responseTime.toFixed(2)}ms)`);
      
      return { status: statusCode, responseTime };
      
    } catch (error) {
      const endTime = Date.now();
      const failedResponseTime = endTime - startTime;
      
      MetricsService.recordApiResponse(failedResponseTime, method, endpoint, 500);
      MetricsService.recordError('api_error', 'api_request');
      
      throw error;
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async simulateAuthentication(method: string = 'jwt', userId?: string): Promise<boolean> {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const success = Math.random() > 0.2; // 80% —É—Å–ø–µ—à–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
      
      MetricsService.recordAuthAttempt(success, method, userId);
      
      if (!success) {
        MetricsService.recordError('auth_failed', 'authentication', userId);
        console.log(`üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${userId || 'anonymous'}`);
        return false;
      }
      
      console.log(`üîì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${userId || 'anonymous'}`);
      return true;
      
    } catch (error) {
      MetricsService.recordError('auth_error', 'authentication', userId);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
   */
  updateDeviceMemoryUsage(deviceId: string, memoryBytes: number): void {
    MetricsService.updateDeviceMemoryUsage(memoryBytes, deviceId);
    console.log(`üíæ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId}: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ ${memoryBytes} –±–∞–π—Ç`);
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
   */
  async runSimulation(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ IoT –º–µ—Ç—Ä–∏–∫...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    await this.simulateDeviceConnection('device-001', 'temperature-sensor');
    await this.simulateDeviceConnection('device-002', 'humidity-sensor');
    await this.simulateDeviceConnection('device-003', 'motion-detector');
    
    // –°–∏–º—É–ª—è—Ü–∏—è MQTT —Å–æ–æ–±—â–µ–Ω–∏–π
    await this.simulateMqttMessageProcessing('device-001', 'telemetry', { temperature: 25.5 });
    await this.simulateMqttMessageProcessing('device-002', 'telemetry', { humidity: 60 });
    await this.simulateMqttMessageProcessing('device-003', 'alert', { motion: true });
    
    // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    await this.simulateApiRequest('GET', '/api/devices');
    await this.simulateApiRequest('POST', '/api/devices/register');
    await this.simulateApiRequest('GET', '/api/telemetry');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await this.simulateAuthentication('jwt', 'user-123');
    await this.simulateAuthentication('apikey', 'device-001');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    this.updateDeviceMemoryUsage('device-001', 1024 * 50); // 50KB
    this.updateDeviceMemoryUsage('device-002', 1024 * 75); // 75KB
    
    console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ OpenTelemetry Collector.');
  }
}
