import { NodeSDK } from '@opentelemetry/sdk-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-node';
import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';

// –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ OpenTelemetry —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV === 'development') {
  diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenTelemetry –¥–ª—è IoT Hub Backend
const otelCollectorUrl =
  process.env.OTEL_COLLECTOR_URL || 'http://localhost:4320';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è OpenTelemetry
process.env.OTEL_EXPORTER_OTLP_ENDPOINT = otelCollectorUrl;
process.env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT = `${otelCollectorUrl}/v1/traces`;
process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT = `${otelCollectorUrl}/v1/metrics`;

// –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞
const resource = new Resource({
  [SemanticResourceAttributes.SERVICE_NAME]: process.env.OTEL_SERVICE_NAME || 'iot-hub-backend',
  [SemanticResourceAttributes.SERVICE_VERSION]: process.env.OTEL_SERVICE_VERSION || '1.0.0',
  [SemanticResourceAttributes.SERVICE_NAMESPACE]: 'iot-hub',
  [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV || 'development',
});

// –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è —Ç—Ä–µ–π—Å–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ timeout –∏ retry
const traceExporter = new OTLPTraceExporter({
  url: `${otelCollectorUrl}/v1/traces`,
  headers: {},
  timeoutMillis: 5000, // 5 —Å–µ–∫—É–Ω–¥ timeout
});

// –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫
const metricExporter = new OTLPMetricExporter({
  url: `${otelCollectorUrl}/v1/metrics`,
  headers: {},
  timeoutMillis: parseInt(process.env.OTEL_METRICS_EXPORT_TIMEOUT || '5000'),
});

// –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞—Ç–µ–ª—å –º–µ—Ç—Ä–∏–∫ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º
const metricReader = new PeriodicExportingMetricReader({
  exporter: metricExporter,
  exportIntervalMillis: parseInt(process.env.OTEL_METRICS_EXPORT_INTERVAL || '10000'), // 10 —Å–µ–∫—É–Ω–¥
  exportTimeoutMillis: parseInt(process.env.OTEL_METRICS_EXPORT_TIMEOUT || '5000'),
});

// –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ timeout –∏ retry
const traceExporter = new OTLPTraceExporter({
  url: `${otelCollectorUrl}/v1/traces`,
  headers: {},
  timeoutMillis: 5000, // 5 —Å–µ–∫—É–Ω–¥ timeout
});

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const spanProcessor = new BatchSpanProcessor(traceExporter, {
  maxQueueSize: 100,
  scheduledDelayMillis: 1000, // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  exportTimeoutMillis: 5000, // Timeout —ç–∫—Å–ø–æ—Ä—Ç–∞
  maxExportBatchSize: 10, // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
});

export const otel = new NodeSDK({
  serviceName: process.env.OTEL_SERVICE_NAME || 'iot-hub-backend',
  resource: resource,

  spanProcessors: [spanProcessor], // –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ

  metricReader: metricReader, // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Ç–∞—Ç–µ–ª—å –º–µ—Ç—Ä–∏–∫

  instrumentations: [
    getNodeAutoInstrumentations({
      // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ —à—É–º–∞
      '@opentelemetry/instrumentation-fs': {
        enabled: false,
      },
      '@opentelemetry/instrumentation-dns': {
        enabled: false,
      },
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º HTTP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏—é
      '@opentelemetry/instrumentation-http': {
        enabled: true,
        ignoreIncomingRequestHook: (req) => {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º health check –∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
          return req.url?.includes('/health') || req.url?.includes('/favicon') || false;
        },
      },
    }),
  ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenTelemetry
export function initializeOpenTelemetry() {
  try {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenTelemetry...');
    console.log(`üìç Collector URL: ${otelCollectorUrl}`);
    
    otel.start();
    console.log('‚úÖ OpenTelemetry —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è OpenTelemetry
    process.on('unhandledRejection', (reason) => {
      if (reason && typeof reason === 'object' && 'message' in reason) {
        const message = (reason as Error).message;
        if (message.includes('ECONNRESET') || message.includes('socket hang up')) {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ OTel –∫–∞–∫ JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
          console.error(JSON.stringify({
            type: 'otel_connection_error',
            message: message,
            stack: (reason as Error).stack,
            timestamp: new Date().toISOString(),
          }));
          return; // –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ OTel
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.on('SIGTERM', () => {
      otel
        .shutdown()
        .then(() => console.log('üîç OpenTelemetry —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'))
        .catch((error) =>
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ OpenTelemetry', error)
        )
        .finally(() => process.exit(0));
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenTelemetry:', error);
    // –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ OTel –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
  }
}
