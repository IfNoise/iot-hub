import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Device } from './entities/device.entity.js';
import { CreateDeviceDto } from './dto/create-device.dto.js';
import { BindDeviceWithOwnerDto } from './dto/bind-device.dto.js';
import { DeviceEventService } from '../infrastructure/kafka/device-event.service.js';

@Injectable()
export class DevicesService {
  private readonly logger = new Logger(DevicesService.name);

  constructor(
    @InjectRepository(Device) private deviceRepo: Repository<Device>,
    private readonly deviceEventService: DeviceEventService
  ) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ë–ï–ó —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
   * –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ CSR API
   */
  async createDevice(dto: CreateDeviceDto) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º ID –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingDevice = await this.deviceRepo.findOne({
      where: { id: dto.deviceId },
    });

    if (existingDevice) {
      throw new Error(`Device with ID ${dto.deviceId} already exists`);
    }

    // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ë–ï–ó —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const device = new Device();
    device.id = dto.deviceId;
    device.model = dto.model || '';
    device.publicKey = dto.publicKeyPem; // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
    device.ownerId = null;
    device.status = 'unbound';
    device.lastSeenAt = new Date();
    device.firmwareVersion = dto.firmwareVersion || undefined;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ CSR API)
    const savedDevice = await this.deviceRepo.save(device);

    // üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ device.registered –≤ Kafka
    try {
      await this.deviceEventService.publishDeviceEvent({
        eventType: 'device.registered',
        correlationId: `reg_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        source: {
          type: 'backend',
          id: 'devices-service',
          version: '1.0.0',
        },
        __version: 'v1',
        payload: {
          deviceId: savedDevice.id,
          manufacturerId: 'default-manufacturer', // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ DTO
          model: savedDevice.model,
          firmwareVersion: savedDevice.firmwareVersion || 'unknown',
          hardwareRevision: undefined,
          serialNumber: undefined,
          capabilities: [],
          registeredBy: 'system',
          registeredAt: savedDevice.createdAt.toISOString(),
          metadata: {
            publicKey: savedDevice.publicKey,
          },
        },
      });

      this.logger.log(
        `‚úÖ Device registered event published for device: ${savedDevice.id}`
      );
    } catch (eventError) {
      this.logger.error(
        `‚ùå Failed to publish device registered event for ${savedDevice.id}`,
        eventError
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    }

    return savedDevice;
  }

  /**
   * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.
   * @param deviceId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * @param ownerId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞.
   * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.
   * @throws –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –¥—Ä—É–≥–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É.
   */

  async bindDevice(dto: BindDeviceWithOwnerDto) {
    // –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ id
    const device = await this.deviceRepo.findOne({
      where: { id: dto.id },
      relations: ['certificate'],
    });
    if (!device) {
      throw new Error(`Device with ID ${dto.id} not found`);
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –¥—Ä—É–≥–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    if (device.ownerId) {
      throw new Error(
        `Device with ID ${dto.id} is already bound to another owner`
      );
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device.ownerId = dto.ownerId;
    device.status = 'bound';
    device.lastSeenAt = new Date();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const updatedDevice = await this.deviceRepo.save(device);

    // üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ device.bound –≤ Kafka
    try {
      await this.deviceEventService.publishDeviceEvent({
        eventType: 'device.bound',
        correlationId: `bind_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        source: {
          type: 'backend',
          id: 'devices-service',
          version: '1.0.0',
        },
        __version: 'v1',
        payload: {
          deviceId: updatedDevice.id,
          userId: updatedDevice.ownerId || dto.ownerId,
          organizationId: undefined, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
          boundAt: updatedDevice.lastSeenAt.toISOString(),
          deviceName: undefined, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ deviceName
          boundBy: 'user',
        },
      });

      this.logger.log(
        `‚úÖ Device bound event published for device: ${updatedDevice.id} to user: ${updatedDevice.ownerId}`
      );
    } catch (eventError) {
      this.logger.error(
        `‚ùå Failed to publish device bound event for ${updatedDevice.id}`,
        eventError
      );
    }

    return {
      device: updatedDevice,
      certificate: device.certificate,
    };
  }

  /**
   * –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞.
   * @param deviceId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
   * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.
   * @throws –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–∂–µ –æ—Ç–≤—è–∑–∞–Ω–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.
   */

  async unbindDevice(deviceId: string, userId?: string) {
    // –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ id
    const device = await this.deviceRepo.findOne({
      where: { id: deviceId },
      relations: ['certificate'],
    });
    if (!device) {
      throw new Error(`Device with ID ${deviceId} not found`);
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É
    if (!device.ownerId) {
      throw new Error(`Device with ID ${deviceId} is already unbound`);
    }
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (userId && device.ownerId !== userId) {
      throw new Error(`User ${userId} is not the owner of device ${deviceId}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const previousUserId = device.ownerId;

    // –û—Ç–≤—è–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    device.ownerId = null;
    device.status = 'unbound';
    device.lastSeenAt = new Date();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const updatedDevice = await this.deviceRepo.save(device);

    // üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ device.unbound –≤ Kafka
    try {
      await this.deviceEventService.publishDeviceEvent({
        eventType: 'device.unbound',
        correlationId: `unbind_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        source: {
          type: 'backend',
          id: 'devices-service',
          version: '1.0.0',
        },
        __version: 'v1',
        payload: {
          deviceId: updatedDevice.id,
          previousUserId: previousUserId || 'unknown',
          unboundAt: updatedDevice.lastSeenAt.toISOString(),
          reason: 'Manual unbind',
          unboundBy: userId ? 'user' : 'admin',
        },
      });

      this.logger.log(
        `‚úÖ Device unbound event published for device: ${updatedDevice.id} from user: ${previousUserId}`
      );
    } catch (eventError) {
      this.logger.error(
        `‚ùå Failed to publish device unbound event for ${updatedDevice.id}`,
        eventError
      );
    }

    return {
      device: updatedDevice,
      certificate: device.certificate,
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏.
   * —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.
   * @returns –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
   */
  async getDevices({ page = 1, limit = 10 } = {}) {
    const [devices, total] = await this.deviceRepo.findAndCount({
      relations: ['certificate'],
      order: { createdAt: 'DESC' },
      skip: (page - 1) * limit,
      take: limit,
    });

    return {
      devices,
      meta: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit),
      },
    };
  }
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
   * @param deviceId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * @returns –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.
   * @throws –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
   */
  async getDeviceById(deviceId: string) {
    const device = await this.deviceRepo.findOne({
      where: { id: deviceId },
      relations: ['certificate'],
    });
    if (!device) {
      throw new Error(`Device with ID ${deviceId} not found`);
    }
    return device;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
   * @param ownerId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞.
   * @param options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
   * @returns –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
   */
  async getUserDevices(ownerId: string, { page = 1, limit = 10 } = {}) {
    const [devices, total] = await this.deviceRepo.findAndCount({
      where: { ownerId },
      relations: ['certificate'],
      order: { createdAt: 'DESC' },
      skip: (page - 1) * limit,
      take: limit,
    });

    return {
      devices,
      meta: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit),
      },
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
   * @param deviceId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * @param updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.
   * @throws –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
   */
  async updateDevice(deviceId: string, updateData: Partial<Device>) {
    const device = await this.deviceRepo.findOne({
      where: { id: deviceId },
      relations: ['certificate'],
    });
    if (!device) {
      throw new Error(`Device with ID ${deviceId} not found`);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    Object.assign(device, updateData);
    const updatedDevice = await this.deviceRepo.save(device);
    return {
      device: updatedDevice,
      certificate: updatedDevice.certificate,
    };
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
   * @param deviceId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * @param deletedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
   * @returns –£–¥–∞–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
   * @throws –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
   */
  async deleteDevice(deviceId: string, deletedBy?: string) {
    const device = await this.deviceRepo.findOne({
      where: { id: deviceId },
      relations: ['certificate'],
    });
    if (!device) {
      throw new Error(`Device with ID ${deviceId} not found`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const wasManufacturingDevice = device.status === 'unbound';
    const wasBoundToUser = !!device.ownerId;
    const lastUserId = device.ownerId;

    // –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–∫–∞—Å–∫–∞–¥–Ω–æ)
    await this.deviceRepo.delete({ id: deviceId });

    // üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ device.deleted –≤ Kafka
    try {
      await this.deviceEventService.publishDeviceEvent({
        eventType: 'device.deleted',
        correlationId: `del_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        source: {
          type: 'backend',
          id: 'devices-service',
          version: '1.0.0',
        },
        __version: 'v1',
        payload: {
          deviceId: device.id,
          deletedBy: deletedBy || 'system',
          deletedAt: new Date().toISOString(),
          reason: 'Manual deletion',
          wasManufacturingDevice,
          wasBoundToUser,
          lastUserId: lastUserId || undefined,
        },
      });

      this.logger.log(
        `‚úÖ Device deleted event published for device: ${device.id}`
      );
    } catch (eventError) {
      this.logger.error(
        `‚ùå Failed to publish device deleted event for ${device.id}`,
        eventError
      );
    }

    return device;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (online/offline/error/sleep/maintenance)
   * @param deviceId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param reason - –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   * @param metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±–∞—Ç–∞—Ä–µ—è, —Å–∏–≥–Ω–∞–ª –∏ —Ç.–¥.)
   */
  async updateDeviceStatus(
    deviceId: string,
    newStatus: 'online' | 'offline' | 'error' | 'sleep' | 'maintenance',
    reason?: string,
    metadata?: {
      lastSeen?: string;
      batteryLevel?: number;
      signalStrength?: number;
      temperature?: number;
    }
  ) {
    const device = await this.deviceRepo.findOne({
      where: { id: deviceId },
      relations: ['certificate'],
    });

    if (!device) {
      throw new Error(`Device with ID ${deviceId} not found`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ø–æ–ª—è status (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Ö—Ä–∞–Ω–∏—Ç—Å—è)
    // –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'unknown'
    const previousStatus = this.mapDeviceStatusToKafkaStatus(device.status);

    // –û–±–Ω–æ–≤–ª—è–µ–º lastSeenAt –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    device.lastSeenAt = new Date();
    const updatedDevice = await this.deviceRepo.save(device);

    // üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ device.status.changed –≤ Kafka
    try {
      await this.deviceEventService.publishDeviceEvent({
        eventType: 'device.status.changed',
        correlationId: `status_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        source: {
          type: 'backend',
          id: 'devices-service',
          version: '1.0.0',
        },
        __version: 'v1',
        payload: {
          deviceId: updatedDevice.id,
          previousStatus: previousStatus as
            | 'online'
            | 'offline'
            | 'error'
            | 'sleep'
            | 'maintenance',
          currentStatus: newStatus,
          changedAt: updatedDevice.lastSeenAt.toISOString(),
          reason: reason || 'Status update',
          metadata: metadata,
        },
      });

      this.logger.log(
        `‚úÖ Device status changed event published for device: ${updatedDevice.id} (${previousStatus} ‚Üí ${newStatus})`
      );
    } catch (eventError) {
      this.logger.error(
        `‚ùå Failed to publish device status changed event for ${updatedDevice.id}`,
        eventError
      );
    }

    return updatedDevice;
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Kafka —Å—Ç–∞—Ç—É—Å
   */
  private mapDeviceStatusToKafkaStatus(dbStatus: string): string {
    switch (dbStatus) {
      case 'bound':
      case 'unbound':
        return 'offline'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º offline
      default:
        return 'offline';
    }
  }
}
