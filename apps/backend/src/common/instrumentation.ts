// OpenTelemetry Instrumentation Bootstrap
// This file must be imported before any other modules to ensure proper instrumentation

import { NodeSDK } from '@opentelemetry/sdk-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-node';
import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';
import { envConfigSchema } from '../config/config.schema';

// –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const envConfig = envConfigSchema.parse(process.env);

// –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ OpenTelemetry –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º
const debugMode = envConfig.OTEL_DEBUG || envConfig.NODE_ENV === 'development';
if (debugMode) {
  diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ OpenTelemetry
if (!envConfig.OTEL_ENABLED) {
  console.log('üìä OpenTelemetry –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OTEL_ENABLED=false');
} else {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
  const collectorUrl = envConfig.OTEL_COLLECTOR_URL;
  const tracesEndpoint = envConfig.OTEL_COLLECTOR_TRACES_ENDPOINT || `${collectorUrl}/v1/traces`;
  const metricsEndpoint = envConfig.OTEL_COLLECTOR_METRICS_ENDPOINT || `${collectorUrl}/v1/metrics`;
  const logsEndpoint = envConfig.OTEL_COLLECTOR_LOGS_ENDPOINT || `${collectorUrl}/v1/logs`;

  process.env.OTEL_EXPORTER_OTLP_ENDPOINT = collectorUrl;
  process.env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT = tracesEndpoint;
  process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT = metricsEndpoint;
  process.env.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT = logsEndpoint;

  // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ
  if (envConfig.OTEL_ENABLE_METRICS) {
    process.env.OTEL_METRICS_EXPORTER = 'otlp';
  }
  if (envConfig.OTEL_ENABLE_LOGGING) {
    process.env.OTEL_LOGS_EXPORTER = 'otlp';
  }

  // –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è —Ç—Ä–µ–π—Å–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω
  let spanProcessors: BatchSpanProcessor[] = [];
  if (envConfig.OTEL_ENABLE_TRACING) {
    const traceExporter = new OTLPTraceExporter({
      url: tracesEndpoint,
      headers: {},
      timeoutMillis: envConfig.OTEL_EXPORTER_TIMEOUT,
    });

    const spanProcessor = new BatchSpanProcessor(traceExporter, {
      maxQueueSize: envConfig.OTEL_MAX_QUEUE_SIZE,
      scheduledDelayMillis: envConfig.OTEL_BATCH_TIMEOUT,
      exportTimeoutMillis: envConfig.OTEL_EXPORTER_TIMEOUT,
      maxExportBatchSize: envConfig.OTEL_BATCH_SIZE,
    });

    spanProcessors = [spanProcessor];
  }

  // –ü–∞—Ä—Å–∏–º resource attributes
  const parseResourceAttributes = (attributesString?: string): Record<string, string> => {
    const baseAttributes = {
      'service.name': envConfig.OTEL_SERVICE_NAME,
      'service.version': envConfig.OTEL_SERVICE_VERSION,
      'environment': envConfig.NODE_ENV,
      'deployment.environment': envConfig.NODE_ENV,
    };

    if (!attributesString) {
      return baseAttributes;
    }

    const customAttributes: Record<string, string> = {};
    attributesString.split(',').forEach(pair => {
      const [key, value] = pair.trim().split('=');
      if (key && value) {
        customAttributes[key.trim()] = value.trim();
      }
    });

    return { ...baseAttributes, ...customAttributes };
  };

  const resourceAttributes = parseResourceAttributes(envConfig.OTEL_RESOURCE_ATTRIBUTES);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const resourceAttributesString = Object.entries(resourceAttributes)
    .map(([key, value]) => `${key}=${value}`)
    .join(',');
  process.env.OTEL_RESOURCE_ATTRIBUTES = resourceAttributesString;

  // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
  const sdk = new NodeSDK({
    serviceName: envConfig.OTEL_SERVICE_NAME,
    spanProcessors: spanProcessors,
    instrumentations: [
      getNodeAutoInstrumentations({
        // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        '@opentelemetry/instrumentation-fs': {
          enabled: false,
        },
        '@opentelemetry/instrumentation-dns': {
          enabled: false,
        },
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ HTTP
        '@opentelemetry/instrumentation-http': {
          enabled: true,
          ignoreIncomingRequestHook: (req) => {
            return (
              req.url?.includes('/health') ||
              req.url?.includes('/favicon') ||
              false
            );
          },
        },
        // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è Express/NestJS —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        '@opentelemetry/instrumentation-express': {
          enabled: true,
        },
        // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è PostgreSQL —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        '@opentelemetry/instrumentation-pg': {
          enabled: true,
        },
        // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è Redis —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        '@opentelemetry/instrumentation-redis': {
          enabled: true,
        },
      }),
    ],
  });

  try {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenTelemetry –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    console.log(`üìç Collector URL: ${collectorUrl}`);
    console.log(`üè∑Ô∏è  –°–µ—Ä–≤–∏—Å: ${envConfig.OTEL_SERVICE_NAME} v${envConfig.OTEL_SERVICE_VERSION}`);
    console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏: ${envConfig.OTEL_ENABLE_METRICS ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
    console.log(`üîÑ –¢—Ä–µ–π—Å—ã: ${envConfig.OTEL_ENABLE_TRACING ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
    console.log(`üìù –õ–æ–≥–∏: ${envConfig.OTEL_ENABLE_LOGGING ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
    console.log(`üêõ Debug: ${debugMode ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    
    sdk.start();
    
    console.log('‚úÖ OpenTelemetry —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–µ—Ç—Ä–∏–∫:');
    console.log('   ‚Ä¢ HTTP –∑–∞–ø—Ä–æ—Å—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)');
    console.log('   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)');
    console.log('   ‚Ä¢ Redis –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)');
    console.log('   ‚Ä¢ Express middleware (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)');
    console.log('   ‚Ä¢ IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ MQTT (–∫–∞—Å—Ç–æ–º–Ω—ã–µ)');
    console.log('   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—à–∏–±–∫–∏ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ)');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.on('SIGTERM', () => {
      sdk
        .shutdown()
        .then(() => console.log('üîç OpenTelemetry —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'))
        .catch((error) =>
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ OpenTelemetry', error)
        )
        .finally(() => process.exit(0));
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è OpenTelemetry
    process.on('unhandledRejection', (reason) => {
      if (reason && typeof reason === 'object' && 'message' in reason) {
        const message = (reason as Error).message;
        if (
          message.includes('ECONNRESET') ||
          message.includes('socket hang up') ||
          message.includes('OTLP')
        ) {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ OTel –∫–∞–∫ JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
          if (debugMode) {
            console.error(
              JSON.stringify({
                type: 'otel_connection_error',
                message: message,
                stack: (reason as Error).stack,
                timestamp: new Date().toISOString(),
              })
            );
          }
          return; // –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ OTel
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenTelemetry:', error);
    // –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ OTel –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const initializeOpenTelemetry = () => {
  console.log('üìä OpenTelemetry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ instrumentation.ts');
};
