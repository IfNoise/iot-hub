import { Injectable } from '@nestjs/common';
import { MetricsService } from '../observability/metrics.service.js';
import { TelemetryService } from '../observability/telemetry.service.js';

@Injectable()
export class MetricsExampleService {
  constructor(
    private readonly metricsService: MetricsService,
    private readonly telemetryService: TelemetryService,
  ) {}

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async connectDevice(deviceId: string, deviceType: string) {
    return this.telemetryService.traceOperation(
      'device_connection',
      async () => {
        const startTime = Date.now();

        try {
          // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          await this.simulateDeviceConnection(deviceId);

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          this.metricsService.recordDeviceConnection({
            deviceId,
            deviceType,
            status: 'connected',
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
          this.metricsService.updateActiveDevices(1, deviceType);

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
          const duration = Date.now() - startTime;
          this.metricsService.recordCustomHistogram(
            'device_connection_duration_ms',
            duration,
            'ms',
            { device_type: deviceType, success: 'true' }
          );

          return { success: true, deviceId, duration };
        } catch (error) {
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          this.metricsService.recordError({
            errorType: 'device_connection_failed',
            operation: 'connect_device',
            severity: 'high',
            deviceId,
          });

          throw error;
        }
      },
      { device_id: deviceId, device_type: deviceType }
    );
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async processMqttMessage(topic: string, messageType: string, payload: Record<string, unknown>) {
    return this.telemetryService.traceOperation(
      'mqtt_message_processing',
      async () => {
        const startTime = Date.now();

        try {
          // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
          await this.simulateMessageProcessing(payload);

          const duration = Date.now() - startTime;

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ MQTT
          this.metricsService.recordMqttMessage({
            messageType,
            topic,
            success: true,
            durationMs: duration,
          });

          return { success: true, duration, messageSize: JSON.stringify(payload).length };
        } catch (error) {
          const duration = Date.now() - startTime;

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
          this.metricsService.recordMqttMessage({
            messageType,
            topic,
            success: false,
            durationMs: duration,
          });

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          this.metricsService.recordError({
            errorType: 'mqtt_processing_error',
            operation: 'process_message',
            severity: 'medium',
          });

          throw error;
        }
      },
      { mqtt_topic: topic, message_type: messageType }
    );
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ API –∑–∞–ø—Ä–æ—Å–∞
   */
  async handleApiRequest(method: string, endpoint: string, userId?: string) {
    return this.telemetryService.traceOperation(
      'api_request_handling',
      async () => {
        const startTime = Date.now();

        try {
          // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞
          const result = await this.simulateApiProcessing(endpoint);
          
          const duration = Date.now() - startTime;
          const statusCode = result.success ? 200 : 400;

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ API
          this.metricsService.recordApiResponse({
            method,
            endpoint,
            statusCode,
            durationMs: duration,
            userId,
          });

          return { ...result, duration, statusCode };
        } catch (error) {
          const duration = Date.now() - startTime;

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É API
          this.metricsService.recordApiResponse({
            method,
            endpoint,
            statusCode: 500,
            durationMs: duration,
            userId,
          });

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          this.metricsService.recordError({
            errorType: 'api_error',
            operation: `${method} ${endpoint}`,
            severity: 'medium',
            userId,
          });

          throw error;
        }
      },
      { http_method: method, http_endpoint: endpoint, user_id: userId || 'anonymous' }
    );
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async authenticateUser(username: string, method: 'oauth' | 'token' | 'basic') {
    return this.telemetryService.traceOperation(
      'user_authentication',
      async () => {
        try {
          // –ò–º–∏—Ç–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          const authResult = await this.simulateAuthentication(username, method);

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          this.metricsService.recordAuthAttempt({
            method,
            success: authResult.success,
            userId: authResult.success ? authResult.userId : undefined,
            errorType: authResult.success ? undefined : authResult.errorType,
          });

          if (!authResult.success) {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            this.metricsService.recordError({
              errorType: authResult.errorType || 'auth_failed',
              operation: 'authenticate_user',
              severity: 'medium',
              userId: username,
            });
          }

          return authResult;
        } catch (error) {
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          this.metricsService.recordAuthAttempt({
            method,
            success: false,
            errorType: 'auth_system_error',
          });

          this.metricsService.recordError({
            errorType: 'auth_system_error',
            operation: 'authenticate_user',
            severity: 'critical',
            userId: username,
          });

          throw error;
        }
      },
      { auth_method: method, username }
    );
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
   */
  async performDatabaseOperation(operation: string, table: string, query?: string) {
    const span = this.telemetryService.createDatabaseTraceContext(operation, table, query);
    
    try {
      const startTime = Date.now();

      // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
      const result = await this.simulateDatabaseOperation(operation, table);
      
      const duration = Date.now() - startTime;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ë–î
      this.telemetryService.recordDatabaseOperation(operation, table, result.success, duration);

      if (!result.success) {
        this.metricsService.recordError({
          errorType: 'database_operation_failed',
          operation: `db_${operation}`,
          severity: 'high',
        });
      }

      return { ...result, duration };
    } catch (error) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ë–î
      this.telemetryService.recordDatabaseOperation(operation, table, false);
      
      this.metricsService.recordError({
        errorType: 'database_connection_error',
        operation: `db_${operation}`,
        severity: 'critical',
      });

      this.telemetryService.recordExceptionInCurrentSpan(error as Error);
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  startPeriodicMetricsCollection(intervalMs = 30000) {
    const collectCustomMetrics = () => {
      try {
        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.collectApplicationMetrics();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this.telemetryService.collectSystemMetrics();
        
        console.log('üìä –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã', new Date().toISOString());
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', error);
        
        this.metricsService.recordError({
          errorType: 'metrics_collection_error',
          operation: 'collect_custom_metrics',
          severity: 'low',
        });
      }
    };

    // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–∑—É
    collectCustomMetrics();
    
    // –ó–∞—Ç–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    const interval = setInterval(collectCustomMetrics, intervalMs);

    return () => clearInterval(interval);
  }

  private collectApplicationMetrics() {
    // –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const memUsage = process.memoryUsage();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    this.metricsService.updateCustomGauge('app_memory_heap_used_mb', memUsage.heapUsed / 1024 / 1024);
    this.metricsService.updateCustomGauge('app_memory_heap_total_mb', memUsage.heapTotal / 1024 / 1024);
    this.metricsService.updateCustomGauge('app_memory_rss_mb', memUsage.rss / 1024 / 1024);
    
    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.metricsService.updateCustomGauge('app_uptime_hours', process.uptime() / 3600);
  }

  // === –ú–µ—Ç–æ–¥—ã –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ===

  private async simulateDeviceConnection(deviceId: string): Promise<void> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    await this.sleep(Math.random() * 100 + 50);
    
    // –ò–Ω–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è
    if (Math.random() < 0.05) {
      throw new Error(`Failed to connect device ${deviceId}`);
    }
  }

  private async simulateMessageProcessing(_payload: Record<string, unknown>): Promise<void> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await this.sleep(Math.random() * 50 + 10);
    
    // –ò–Ω–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–µ—Ç—Å—è
    if (Math.random() < 0.03) {
      throw new Error('Message processing failed');
    }
  }

  private async simulateApiProcessing(endpoint: string): Promise<{ success: boolean; data?: Record<string, unknown> }> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API
    await this.sleep(Math.random() * 200 + 20);
    
    // –†–∞–∑–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
    const successRate = endpoint.includes('auth') ? 0.95 : 0.98;
    
    return {
      success: Math.random() < successRate,
      data: { endpoint, timestamp: Date.now() },
    };
  }

  private async simulateAuthentication(username: string, method: string): Promise<{
    success: boolean;
    userId?: string;
    errorType?: string;
  }> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await this.sleep(Math.random() * 300 + 100);
    
    // –†–∞–∑–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    const successRates = { oauth: 0.95, token: 0.98, basic: 0.90 };
    const successRate = successRates[method as keyof typeof successRates] || 0.90;
    
    const success = Math.random() < successRate;
    
    return {
      success,
      userId: success ? `user_${username}_${Date.now()}` : undefined,
      errorType: success ? undefined : ['invalid_credentials', 'token_expired', 'user_not_found'][Math.floor(Math.random() * 3)],
    };
  }

  private async simulateDatabaseOperation(_operation: string, _table: string): Promise<{ success: boolean; rowsAffected?: number }> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
    await this.sleep(Math.random() * 100 + 10);
    
    // –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –¥–ª—è –ë–î
    const success = Math.random() < 0.98;
    
    return {
      success,
      rowsAffected: success ? Math.floor(Math.random() * 10) + 1 : undefined,
    };
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
