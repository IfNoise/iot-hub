import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { PinoLogger, InjectPinoLogger } from 'nestjs-pino';
import { KafkaConsumerService } from './kafka-consumer.service.js';
import { KafkaTopics, AllKafkaEvent } from '@iot-hub/contracts-kafka';
import type { Consumer, EachMessagePayload } from 'kafkajs';

@Injectable()
export class DeviceEventConsumer implements OnModuleInit, OnModuleDestroy {
  private consumer: Consumer | null = null;

  constructor(
    private readonly kafkaConsumer: KafkaConsumerService,
    @InjectPinoLogger(DeviceEventConsumer.name)
    private readonly logger: PinoLogger
  ) {}

  async onModuleInit() {
    this.logger.info('üöÄ Starting Device Event Consumer...');

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã device-events
      this.consumer = await this.kafkaConsumer.createConsumer('device-events');

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ device events
      const topics = [
        KafkaTopics.DeviceEvents,
        KafkaTopics.DeviceTelemetry,
        KafkaTopics.DeviceCommands,
      ];

      await this.kafkaConsumer.subscribeToTopics(
        this.consumer,
        topics,
        this.handleMessage.bind(this)
      );

      this.logger.info('‚úÖ Device Event Consumer started successfully');
    } catch (error) {
      this.logger.error('‚ùå Failed to start Device Event Consumer', error);
      throw error;
    }
  }

  async onModuleDestroy() {
    this.logger.info('üõë Stopping Device Event Consumer...');

    if (this.consumer) {
      try {
        await this.consumer.disconnect();
        this.logger.info('‚úÖ Device Event Consumer stopped');
      } catch (error) {
        this.logger.error('‚ùå Error stopping Device Event Consumer', error);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Kafka
   */
  private async handleMessage(payload: EachMessagePayload): Promise<void> {
    try {
      const event = await this.kafkaConsumer.parseMessage<AllKafkaEvent>(
        payload
      );

      if (!event) {
        this.logger.warn('üì¶ Received empty or invalid message');
        return;
      }

      const { eventType } = event;
      this.logger.debug(`üì• Processing ${eventType} event`);

      // –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
      switch (eventType) {
        case 'device.registered':
          await this.handleDeviceRegistered(event);
          break;
        case 'device.bound':
          await this.handleDeviceBound(event);
          break;
        case 'device.unbound':
          await this.handleDeviceUnbound(event);
          break;
        case 'device.status.changed':
          await this.handleDeviceStatusChanged(event);
          break;
        case 'device.deleted':
          await this.handleDeviceDeleted(event);
          break;
        case 'device.telemetry.received':
          await this.handleDeviceTelemetryReceived(event);
          break;
        default:
          this.logger.debug(`ü§∑ Unhandled event type: ${eventType}`);
      }
    } catch (error) {
      this.logger.error('‚ùå Error processing message', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private async handleDeviceRegistered(event: AllKafkaEvent) {
    if (event.eventType !== 'device.registered') return;

    const { payload } = event;

    this.logger.info(
      `üÜï Device registered: ${payload.deviceId} (model: ${payload.model})`
    );

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É:
    // - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    // - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    // - –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ OpenTelemetry
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private async handleDeviceBound(event: AllKafkaEvent) {
    if (event.eventType !== 'device.bound') return;

    const { payload } = event;

    this.logger.info(
      `üîó Device bound: ${payload.deviceId} to user: ${payload.userId}`
    );

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:
    // - –û—Ç–ø—Ä–∞–≤–∫–∞ welcome email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // - –°–æ–∑–¥–∞–Ω–∏–µ dashboard –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–≤—è–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private async handleDeviceUnbound(event: AllKafkaEvent) {
    if (event.eventType !== 'device.unbound') return;

    const { payload } = event;

    this.logger.info(
      `üîì Device unbound: ${payload.deviceId} from user: ${payload.previousUserId}`
    );

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–≤—è–∑–∫–∏:
    // - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤—è–∑–∫–µ
    // - –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private async handleDeviceStatusChanged(event: AllKafkaEvent) {
    if (event.eventType !== 'device.status.changed') return;

    const { payload } = event;

    this.logger.info(
      `üîÑ Device status changed: ${payload.deviceId} (${payload.previousStatus} ‚Üí ${payload.currentStatus})`
    );

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:
    // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ real-time dashboard
    // - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    // - –ó–∞–ø—É—Å–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ error
    // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

    if (payload.currentStatus === 'error') {
      this.logger.warn(
        `‚ö†Ô∏è Device ${payload.deviceId} went into error state: ${
          payload.reason || 'Unknown reason'
        }`
      );
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private async handleDeviceDeleted(event: AllKafkaEvent) {
    if (event.eventType !== 'device.deleted') return;

    const { payload } = event;

    this.logger.info(
      `üóëÔ∏è Device deleted: ${payload.deviceId} by: ${payload.deletedBy}`
    );

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
    // - –û—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    // - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
   */
  private async handleDeviceTelemetryReceived(event: AllKafkaEvent) {
    if (event.eventType !== 'device.telemetry.received') return;

    const { payload } = event;

    this.logger.debug(`üìä Telemetry received from device: ${payload.deviceId}`);

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏:
    // - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ time-series database
    // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ real-time metrics
    // - –ü—Ä–æ–≤–µ—Ä–∫–∞ thresholds –∏ –∞–ª–µ—Ä—Ç–æ–≤
    // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ device status –Ω–∞ online
  }
}
