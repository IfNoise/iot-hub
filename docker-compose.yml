services:
  # EMQX MQTT Broker with mTLS support - optimized
  emqx:
    image: emqx/emqx:latest
    container_name: emqx-mtls
    restart: unless-stopped

    ports:
      - '1883:1883'
      - '8883:8883'
      - '18083:18083'
      - '8083:8083'

    environment:
      - EMQX_NAME=emqx-mtls
      - EMQX_HOST=127.0.0.1
      - EMQX_NODE__COOKIE=emqxsecretcookie
      - EMQX_DASHBOARD__DEFAULT_USERNAME=admin
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=iot-hub-admin
      - EMQX_LOG__CONSOLE_HANDLER__LEVEL=debug

    volumes:
      - iot-hub-certs:/opt/emqx/etc/certs:ro
      - ./emqx-mtls.conf:/opt/emqx/etc/emqx.conf:ro
      - emqx-data:/opt/emqx/data
      - emqx-log:/opt/emqx/log

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

    healthcheck:
      test: ['CMD', '/opt/emqx/bin/emqx_ctl', 'status']
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s

    networks:
      - iot-network

  # Zookeeper для Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: iot-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - iot-network

  # Kafka брокер
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: iot-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168 # 7 дней
      KAFKA_LOG_SEGMENT_BYTES: 104857600 # 100MB
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000 # 5 минут
    ports:
      - '9092:9092'
      - '9093:9093'
    networks:
      - iot-network

  # Kafdrop — UI для Kafka
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
    ports:
      - '9000:9000'
    networks:
      - iot-network

  # IoT Hub Backend - optimized
  iot-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: iot-hub-backend
    working_dir: /workspace
    command:
      [
        'sh',
        '-c',
        'npx nx build @iot-hub/backend && npx nx serve @iot-hub/backend --host=0.0.0.0',
      ]
    ports:
      - '3000:3000'

    environment:
      - NODE_ENV=development
      - DOCKER=true
      - UID=1000
      - GID=1000
      - NODE_OPTIONS=--max-old-space-size=1536 --experimental-specifier-resolution=node
      - PORT=3000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=iot_user
      - DATABASE_PASSWORD=iot_password
      - DATABASE_NAME=iot_hub
      - DB_SSL=false
      - JWT_SECRET=your-super-secret-jwt-key-for-production
      - LOG_LEVEL=debug
      # Kafka Configuration
      - KAFKA_BROKER_URL=kafka:9092
      - KAFKA_CLIENT_ID=iot-hub-backend
      - KAFKA_GROUP_ID=iot-hub-backend-group
      - KAFKA_CONSUMER_GROUP_ID=iot-hub-consumers
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - KAFKA_ENABLE_SSL=false
      # OpenTelemetry Configuration
      - OTEL_ENABLED=true
      - OTEL_SERVICE_NAME=iot-hub-backend
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_COLLECTOR_URL=http://otel-collector:4318
      - OTEL_COLLECTOR_TRACES_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_COLLECTOR_METRICS_ENDPOINT=http://otel-collector:4318/v1/metrics
      - OTEL_COLLECTOR_LOGS_ENDPOINT=http://otel-collector:4318/v1/logs
      - OTEL_ENABLE_TRACING=true
      - OTEL_ENABLE_METRICS=true
      - OTEL_ENABLE_LOGGING=true
      - OTEL_DEBUG=true
      # Loki Configuration
      - LOKI_ENABLED=true
      - LOKI_URL=http://loki:3100
      - LOKI_LABELS=job=iot-hub-backend,version=1.0.0
      - LOKI_TIMEOUT=30000
      - LOKI_SILENCE_ERRORS=true
      # Pino Configuration
      - LOG_ENABLE_REQUEST_LOGGING=true
      - LOG_ENABLE_METADATA=true
        # Keycloak Configuration
      - KEYCLOAK_URL=http://keycloak:8080
      - FRONT_END_URL=http://localhost:8080
      - KEYCLOAK_REALM=iot-hub
      - KEYCLOAK_CLIENT_ID=iot-hub-backend
      - KEYCLOAK_CLIENT_SECRET=DiAaPbYf4CT9bm7UcebriVX4WPobuMrD
      - KEYCLOAK_ADMIN_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN_USERNAME=noise83
      - KEYCLOAK_ADMIN_PASSWORD=00000006
    volumes:
      - .:/workspace:cached
      - /workspace/node_modules # ❗️Важно: НЕ перетираем node_modules
      - ./.nx:/workspace/.nx:cached
      - iot-hub-certs:/workspace/certs
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 256M

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/api/health',
        ]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s

    networks:
      - iot-network

  # PostgreSQL Database - optimized
  postgres:
    image: postgres:15-alpine
    container_name: iot-postgres
    restart: unless-stopped

    environment:
      - POSTGRES_DB=iot_hub
      - POSTGRES_USER=iot_user
      - POSTGRES_PASSWORD=iot_password
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=
      - POSTGRES_MAX_CONNECTIONS=50

    volumes:
      - postgres-data:/var/lib/postgresql/data

    ports:
      - '5432:5432'

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U iot_user -d iot_hub']
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s

    networks:
      - iot-network

  # Redis - optimized
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru

    volumes:
      - redis-data:/data

    ports:
      - '6379:6379'

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

    networks:
      - iot-network

  # Keycloak Database
  keycloak-db:
    image: postgres:15-alpine
    container_name: keycloak-postgres
    restart: unless-stopped

    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak_password

    volumes:
      - keycloak-db-data:/var/lib/postgresql/data

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U keycloak -d keycloak']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    networks:
      - iot-network

  # Keycloak Identity and Access Management
  keycloak:
    build:
      context: .
      dockerfile: keycloak/Dockerfile.keycloak
    container_name: iot-keycloak
    restart: unless-stopped

    environment:
      # Database
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak_password

      # Admin user
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=iot-keycloak-admin

      # Configuration
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_PORT=8080
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true

      # Logging
      - KC_LOG_LEVEL=DEBUG
      - KC_LOG_CONSOLE_LEVEL=DEBUG
      - KC_LOG_CONSOLE_COLOR=true
      # Metrics
      - KC_METRICS_ENABLED=true

      # Event Listeners автоконфигурация
      - KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_SUCCESS_LEVEL=info
      - KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_ERROR_LEVEL=warn
    ports:
      - '8080:8080'
      - '8443:8443'

    volumes:
      - keycloak-data:/opt/keycloak/data
      - ./keycloak/themes:/opt/keycloak/themes:ro # Включаем обновленную тему
      - ./keycloak/providers:/opt/keycloak/providers:ro # Пока отключено

    depends_on:
      keycloak-db:
        condition: service_healthy

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

    networks:
      - iot-network

volumes:
  emqx-data:
    driver: local
  emqx-log:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  keycloak-db-data:
    driver: local
  keycloak-data:
    driver: local
  iot-hub-certs:
    external: true
    name: iot-hub-certs

networks:
  iot-network:
    external: true
    name: iot-network
