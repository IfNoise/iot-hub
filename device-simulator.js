#!/usr/bin/env node

/**
 * IoT Device Simulator for MQTT RPC Protocol
 *
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ:
 * - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É
 * - –°–ª—É—à–∞–µ—Ç RPC –∫–æ–º–∞–Ω–¥—ã –æ—Ç backend —Å–µ—Ä–≤–∏—Å–∞
 * - –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ RPC –ø—Ä–æ—Ç–æ–∫–æ–ª—É
 * - –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ–Ω—Å–æ—Ä–æ–≤, —Ç–∞–π–º–µ—Ä–æ–≤, —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node device-simulator.js --user-id user123 --device-id device456
 *
 * –ò–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 * node device-simulator.js --user-id user123 --device-id device456 --mqtt-host localhost --mqtt-port 1883
 */

const mqtt = require('mqtt');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultConfig = {
  mqttHost: 'localhost',
  mqttPort: 1883,
  mqttSecurePort: 8883,
  userId: 'test-user',
  deviceId: 'test-device',
  keepalive: 60,
  qos: 1,
  useTLS: false,
  certPath: null,
  keyPath: null,
  caPath: null,
};

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArgs() {
  const args = process.argv.slice(2);
  const config = { ...defaultConfig };

  for (let i = 0; i < args.length; i += 2) {
    const key = args[i]
      ?.replace('--', '')
      .replace(/-([a-z])/g, (g) => g[1].toUpperCase());
    const value = args[i + 1];

    if (key && value) {
      if (
        key === 'mqttPort' ||
        key === 'mqttSecurePort' ||
        key === 'keepalive' ||
        key === 'qos'
      ) {
        config[key] = Number(value);
      } else if (key === 'useTLS') {
        config[key] = value === 'true';
      } else {
        config[key] = value;
      }
    }
  }

  return config;
}

/**
 * –ö–ª–∞—Å—Å —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
class IoTDeviceSimulator {
  constructor(config) {
    this.config = config;
    this.client = null;
    this.deviceState = this.initializeDeviceState();
    this.commandTopic = `users/${config.userId}/devices/${config.deviceId}/rpc/request`;
    this.responseTopic = `users/${config.userId}/devices/${config.deviceId}/rpc/response`;

    console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:`);
    console.log(`   üë§ User ID: ${config.userId}`);
    console.log(`   üì± Device ID: ${config.deviceId}`);
    console.log(`   üì° MQTT: mqtt://${config.mqttHost}:${config.mqttPort}`);
    console.log(`   üì• Command Topic: ${this.commandTopic}`);
    console.log(`   üì§ Response Topic: ${this.responseTopic}`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  initializeDeviceState() {
    return {
      status: 'online',
      uptime: 0,
      temperature: 23.5,
      humidity: 45.2,
      pressure: 1013.25,
      discreteTimers: [
        {
          id: 1,
          enabled: false,
          schedule: '',
          duration: 0,
          channel: 1,
          lastRun: null,
        },
        {
          id: 2,
          enabled: false,
          schedule: '',
          duration: 0,
          channel: 2,
          lastRun: null,
        },
      ],
      analogTimers: [
        {
          id: 1,
          enabled: false,
          schedule: '',
          value: 0,
          channel: 1,
          lastRun: null,
        },
      ],
      discreteRegulators: [
        {
          id: 1,
          enabled: false,
          sensor: 'temperature',
          target: 25,
          hysteresis: 2,
          channel: 1,
          state: false,
        },
      ],
      analogRegulators: [
        {
          id: 1,
          enabled: false,
          sensor: 'humidity',
          target: 50,
          pid: { p: 1, i: 0.1, d: 0.05 },
          channel: 1,
          value: 0,
        },
      ],
      irrigators: [
        {
          id: 1,
          enabled: false,
          schedule: '',
          duration: 300,
          pump: 1,
          moisture: 45,
        },
      ],
      lastUpdate: new Date().toISOString(),
    };
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É
   */
  async connect() {
    const port = this.config.useTLS
      ? this.config.mqttSecurePort
      : this.config.mqttPort;
    const protocol = this.config.useTLS ? 'mqtts' : 'mqtt';
    const brokerUrl = `${protocol}://${this.config.mqttHost}:${port}`;

    const connectOptions = {
      clientId: `device-${this.config.deviceId}`,
      keepalive: this.config.keepalive,
      clean: true,
      reconnectPeriod: 2000,
      connectTimeout: 30000,
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mTLS –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (this.config.useTLS) {
      const fs = require('fs');

      console.log(`üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mTLS —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏:`);
      console.log(`   üìú Client Cert: ${this.config.certPath}`);
      console.log(`   üîë Client Key: ${this.config.keyPath}`);
      console.log(`   üèõÔ∏è  CA Cert: ${this.config.caPath}`);

      try {
        if (this.config.certPath && this.config.keyPath && this.config.caPath) {
          connectOptions.cert = fs.readFileSync(this.config.certPath);
          connectOptions.key = fs.readFileSync(this.config.keyPath);
          connectOptions.ca = fs.readFileSync(this.config.caPath);
          connectOptions.rejectUnauthorized = true;
        } else {
          throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º –¥–ª—è mTLS');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error.message);
        throw error;
      }
    }

    this.client = mqtt.connect(brokerUrl, connectOptions);

    return new Promise((resolve, reject) => {
      this.client.on('connect', () => {
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: ${brokerUrl}`);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        this.client.subscribe(
          this.commandTopic,
          { qos: this.config.qos },
          (err) => {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã:', err);
              reject(err);
            } else {
              console.log(`üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã: ${this.commandTopic}`);
              resolve();
            }
          }
        );
      });

      this.client.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ MQTT:', error);
        reject(error);
      });

      this.client.on('message', (topic, message) => {
        this.handleCommand(topic, message);
      });

      this.client.on('offline', () => {
        console.log('‚ö†Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MQTT');
      });

      this.client.on('reconnect', () => {
        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT...');
      });
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö RPC –∫–æ–º–∞–Ω–¥
   */
  handleCommand(topic, message) {
    try {
      const command = JSON.parse(message.toString());
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${command.method} (ID: ${command.id})`);

      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const processingTime = Math.random() * 100 + 50; // 50-150ms

      setTimeout(() => {
        this.processCommand(command);
      }, processingTime);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π RPC –∫–æ–º–∞–Ω–¥—ã
   */
  processCommand(command) {
    const { id, method, params = {} } = command;
    let result = null;
    let error = null;

    try {
      switch (method) {
        case 'getDeviceState':
          result = this.getDeviceState();
          break;

        case 'getSensors':
          result = this.getSensors();
          break;

        case 'reboot':
          result = this.reboot();
          break;

        case 'updateDiscreteTimer':
          result = this.updateDiscreteTimer(params);
          break;

        case 'updateAnalogTimer':
          result = this.updateAnalogTimer(params);
          break;

        case 'updateDiscreteRegulator':
          result = this.updateDiscreteRegulator(params);
          break;

        case 'updateAnalogRegulator':
          result = this.updateAnalogRegulator(params);
          break;

        case 'updateIrrigator':
          result = this.updateIrrigator(params);
          break;

        default:
          error = {
            code: -32601,
            message: `–ú–µ—Ç–æ–¥ '${method}' –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          };
      }
    } catch (err) {
      error = {
        code: -32603,
        message: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${err.message}`,
      };
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    const response = {
      id,
      result,
      error,
    };

    this.sendResponse(response);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ RPC –∫–æ–º–∞–Ω–¥—É
   */
  sendResponse(response) {
    const message = JSON.stringify(response);

    this.client.publish(
      this.responseTopic,
      message,
      { qos: this.config.qos },
      (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', err);
        } else {
          console.log(
            `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: ${response.id} (${
              response.error ? 'error' : 'success'
            })`
          );
        }
      }
    );
  }

  // === RPC Methods Implementation ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  getDeviceState() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
    this.updateSensors();
    this.deviceState.uptime = Date.now() - this.startTime;
    this.deviceState.lastUpdate = new Date().toISOString();

    return { ...this.deviceState };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
   */
  getSensors() {
    this.updateSensors();

    return {
      temperature: this.deviceState.temperature,
      humidity: this.deviceState.humidity,
      pressure: this.deviceState.pressure,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  reboot() {
    console.log('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');

    // –°–±—Ä–æ—Å uptime
    this.startTime = Date.now();
    this.deviceState.uptime = 0;

    // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    this.deviceState.status = 'rebooting';

    setTimeout(() => {
      this.deviceState.status = 'online';
      console.log('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    }, 3000);

    return {
      success: true,
      message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...',
      estimatedTime: 3000,
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
   */
  updateDiscreteTimer(params) {
    const { id, enabled, schedule, duration, channel } = params;

    const timer = this.deviceState.discreteTimers.find((t) => t.id === id);
    if (!timer) {
      throw new Error(`–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (enabled !== undefined) timer.enabled = enabled;
    if (schedule !== undefined) timer.schedule = schedule;
    if (duration !== undefined) timer.duration = duration;
    if (channel !== undefined) timer.channel = channel;

    console.log(
      `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä ${id}: enabled=${timer.enabled}, channel=${timer.channel}`
    );

    return { ...timer };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
   */
  updateAnalogTimer(params) {
    const { id, enabled, schedule, value, channel } = params;

    const timer = this.deviceState.analogTimers.find((t) => t.id === id);
    if (!timer) {
      throw new Error(`–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (enabled !== undefined) timer.enabled = enabled;
    if (schedule !== undefined) timer.schedule = schedule;
    if (value !== undefined) timer.value = value;
    if (channel !== undefined) timer.channel = channel;

    console.log(
      `üìä –û–±–Ω–æ–≤–ª–µ–Ω –∞–Ω–∞–ª–æ–≥–æ–≤—ã–π —Ç–∞–π–º–µ—Ä ${id}: enabled=${timer.enabled}, value=${timer.value}`
    );

    return { ...timer };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
   */
  updateDiscreteRegulator(params) {
    const { id, enabled, sensor, target, hysteresis, channel } = params;

    const regulator = this.deviceState.discreteRegulators.find(
      (r) => r.id === id
    );
    if (!regulator) {
      throw new Error(`–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (enabled !== undefined) regulator.enabled = enabled;
    if (sensor !== undefined) regulator.sensor = sensor;
    if (target !== undefined) regulator.target = target;
    if (hysteresis !== undefined) regulator.hysteresis = hysteresis;
    if (channel !== undefined) regulator.channel = channel;

    console.log(
      `üéõÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä ${id}: target=${regulator.target}¬∞C`
    );

    return { ...regulator };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
   */
  updateAnalogRegulator(params) {
    const { id, enabled, sensor, target, pid, channel } = params;

    const regulator = this.deviceState.analogRegulators.find(
      (r) => r.id === id
    );
    if (!regulator) {
      throw new Error(`–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (enabled !== undefined) regulator.enabled = enabled;
    if (sensor !== undefined) regulator.sensor = sensor;
    if (target !== undefined) regulator.target = target;
    if (pid !== undefined) regulator.pid = { ...regulator.pid, ...pid };
    if (channel !== undefined) regulator.channel = channel;

    console.log(
      `üìà –û–±–Ω–æ–≤–ª–µ–Ω –∞–Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä ${id}: target=${regulator.target}%`
    );

    return { ...regulator };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ä—Ä–∏–≥–∞—Ç–æ—Ä–∞
   */
  updateIrrigator(params) {
    const { id, enabled, schedule, duration, pump } = params;

    const irrigator = this.deviceState.irrigators.find((i) => i.id === id);
    if (!irrigator) {
      throw new Error(`–ò—Ä—Ä–∏–≥–∞—Ç–æ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (enabled !== undefined) irrigator.enabled = enabled;
    if (schedule !== undefined) irrigator.schedule = schedule;
    if (duration !== undefined) irrigator.duration = duration;
    if (pump !== undefined) irrigator.pump = pump;

    console.log(
      `üíß –û–±–Ω–æ–≤–ª–µ–Ω –∏—Ä—Ä–∏–≥–∞—Ç–æ—Ä ${id}: enabled=${irrigator.enabled}, duration=${irrigator.duration}s`
    );

    return { ...irrigator };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–µ–Ω—Å–æ—Ä–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
   */
  updateSensors() {
    // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬±0.5¬∞C)
    this.deviceState.temperature += (Math.random() - 0.5) * 1.0;
    this.deviceState.temperature =
      Math.round(this.deviceState.temperature * 10) / 10;

    // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (¬±2%)
    this.deviceState.humidity += (Math.random() - 0.5) * 4.0;
    this.deviceState.humidity = Math.max(
      0,
      Math.min(100, Math.round(this.deviceState.humidity * 10) / 10)
    );

    // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è (¬±1 hPa)
    this.deviceState.pressure += (Math.random() - 0.5) * 2.0;
    this.deviceState.pressure =
      Math.round(this.deviceState.pressure * 100) / 100;
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
   */
  async start() {
    try {
      this.startTime = Date.now();
      await this.connect();

      // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
      setInterval(() => {
        this.updateSensors();
      }, 5000);

      console.log('üéØ –°–∏–º—É–ª—è—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('   üìä –°–µ–Ω—Å–æ—Ä—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥');
      console.log('   ‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞:', error);
      process.exit(1);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
   */
  stop() {
    console.log('\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞...');

    if (this.client) {
      this.client.end();
    }

    console.log('‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  }
}

// === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async function main() {
  const config = parseArgs();
  const simulator = new IoTDeviceSimulator(config);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
  process.on('SIGINT', () => simulator.stop());
  process.on('SIGTERM', () => simulator.stop());

  process.on('unhandledRejection', (error) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

  await simulator.start();
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = IoTDeviceSimulator;
