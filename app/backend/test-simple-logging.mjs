#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –º–æ–¥—É–ª–µ–π NestJS
import 'dotenv/config';
import pino from 'pino';
import path from 'path';
import fs from 'fs';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∫–∞–∫ –≤ ConfigService
function createLogger() {
  const LOG_LEVEL = process.env.LOG_LEVEL || 'info';
  const LOG_FILE_PATH = process.env.LOG_FILE_PATH || './logs/development.log';
  const ENABLE_FILE_LOGGING_IN_DEV =
    process.env.ENABLE_FILE_LOGGING_IN_DEV === 'true';

  console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('- LOG_LEVEL:', LOG_LEVEL);
  console.log('- LOG_FILE_PATH:', LOG_FILE_PATH);
  console.log('- ENABLE_FILE_LOGGING_IN_DEV:', ENABLE_FILE_LOGGING_IN_DEV);

  if (!ENABLE_FILE_LOGGING_IN_DEV) {
    console.log('‚ùå –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ development');
    return null;
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const logDir = path.dirname(LOG_FILE_PATH);
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤:', logDir);
  }

  return pino({
    level: LOG_LEVEL,
    transport: {
      targets: [
        {
          target: 'pino-pretty',
          level: LOG_LEVEL,
          options: {
            translateTime: 'SYS:standard',
            ignore: 'pid,hostname',
            colorize: true,
          },
        },
        {
          target: 'pino/file',
          level: LOG_LEVEL,
          options: {
            destination: LOG_FILE_PATH,
            mkdir: true,
          },
        },
      ],
    },
  });
}

async function testLogging() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');

  const logger = createLogger();

  if (!logger) {
    console.log('‚ö†Ô∏è –õ–æ–≥–≥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }

  console.log('‚úÖ –õ–æ–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');

  logger.debug('üêõ –¢–µ—Å—Ç–æ–≤–æ–µ debug —Å–æ–æ–±—â–µ–Ω–∏–µ');
  logger.info('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ info —Å–æ–æ–±—â–µ–Ω–∏–µ');
  logger.warn('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ');
  logger.error('‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ error —Å–æ–æ–±—â–µ–Ω–∏–µ');

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  logger.info(
    {
      userId: 'test-user-123',
      action: 'test_logging',
      metadata: {
        testType: 'file_logging',
        timestamp: new Date().toISOString(),
      },
    },
    '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
  );

  console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–æ–≥\n');

  // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
  const LOG_FILE_PATH = process.env.LOG_FILE_PATH || './logs/development.log';
  if (fs.existsSync(LOG_FILE_PATH)) {
    const logContent = fs.readFileSync(LOG_FILE_PATH, 'utf8');
    const lines = logContent.trim().split('\n');

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ: ${LOG_FILE_PATH}`
    );
    console.log('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π:');

    const lastLines = lines.slice(-5);
    lastLines.forEach((line, index) => {
      try {
        const parsed = JSON.parse(line);
        console.log(`  ${index + 1}. [${parsed.level}] ${parsed.msg}`);
      } catch {
        console.log(`  ${index + 1}. ${line.substring(0, 100)}...`);
      }
    });
  } else {
    console.log('‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', LOG_FILE_PATH);
  }

  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
}

testLogging().catch(console.error);
