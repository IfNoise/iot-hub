const forge = require('node-forge');
const fs = require('fs');
const path = require('path');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã backend
const caKeyPath = path.join(__dirname, 'apps/backend/certs/ca-key.pem');
const caCertPath = path.join(__dirname, 'apps/backend/certs/ca-cert.pem');

try {
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ backend...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  if (!fs.existsSync(caKeyPath)) {
    throw new Error(`CA –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${caKeyPath}`);
  }
  console.log('‚úÖ CA –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');

  if (!fs.existsSync(caCertPath)) {
    throw new Error(`CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${caCertPath}`);
  }
  console.log('‚úÖ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º CA
  const caKeyPem = fs.readFileSync(caKeyPath, 'utf8');
  const caCertPem = fs.readFileSync(caCertPath, 'utf8');

  const pki = forge.pki;

  // –ü–∞—Ä—Å–∏–º CA –∫–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  const caKey = pki.privateKeyFromPem(caKeyPem);
  console.log('‚úÖ CA –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');

  const caCert = pki.certificateFromPem(caCertPem);
  console.log('‚úÖ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  const caCertValid = caCert.verify(caCert);
  console.log(`‚úÖ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π: ${caCertValid}`);

  console.log('CA Subject:');
  caCert.subject.attributes.forEach((attr) => {
    console.log(`  ${attr.name}: ${attr.value}`);
  });

  console.log('üéâ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CA:', error.message);
}
